name: GHA-AIT-functionality-security-tests
# We  need to set java home to JDK 8
# Also configure workflow_dispatch fr all workflows - add github ref

on:
  pull_request:
    branches: [ disabled ] ## branches TBD
    types: [assigned, opened, synchronize, reopened] ## Types TBD
  push:
    branches: [ disabled ]
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      BRANCH:
        description: "Specify branch (main is default)"
        required: false
        default: 'main'

jobs:
  AIT_func_security:
    # needs: install-all-java
    timeout-minutes: 120
    runs-on: ubuntu-latest
    # Determine if easier to make the env strings below part of the matrix
    env:
      java_func_path: "tests/java/functionality"
      java_func_type: "security"
      default-branch: "main"
    strategy:
      ##max-parallel: 1 ## used to force sequential
      fail-fast: false
      matrix:
        # func_path: [akka, ejb, jaxrs, jms, netty, play, quartz, snap, spring, thrift]
        func_tests:
          - datastore_base.py
          - hsm_atts.py
          - hsm_custom_events.py
          - hsm_custom_params.py
          - hsm_msg_params.py
          - hsm_record_sql.py
          - hsm_strip_exceptions.py
          - lasp_attributes.py
          - lasp_custom_events.py
          - lasp_custom_params.py
          - lasp_datastore.py
          - lasp_msg_params.py
          - lasp_strip_exceptions.py

    steps:
      - uses: actions/checkout@v2

      ## Ongoing tests with artifactory dependecies
      - name: Checkout AIT repo test
        uses: actions/checkout@v2
        with:
          repository: newrelic/java-agent-integration-tests
          ref: main
          token: ${{ secrets.AITPAT }}
          path: agent-integration-tests

      # Print Environmental variables
      - name: Print Environmental variables
        run: |
          printenv | sort -f

      # Apps repos/caches - this prpcess could be a candidate for custom action
      - name: Checkout Cache 1
        uses: actions/checkout@v2
        with:
          repository: newrelic/java-ait-cache-1
          ref: gha
          token: ${{ secrets.AITPAT }}
          path: appcache1
          lfs: true

      - name: Checkout Cache 2
        uses: actions/checkout@v2
        with:
          repository: newrelic/java-ait-cache-2
          ref: gha
          token: ${{ secrets.AITPAT }}
          path: appcache2
          lfs: true

      - name: Checkout Cache 3
        uses: actions/checkout@v2
        with:
          repository: newrelic/java-ait-cache-3
          ref: gha
          token: ${{ secrets.AITPAT }}
          path: appcache3
          lfs: true

      - name: Checkout Cache 4
        uses: actions/checkout@v2
        with:
          repository: newrelic/java-ait-cache-4
          ref: gha
          token: ${{ secrets.AITPAT }}
          path: appcache4
          lfs: true

      # Consolidate caches into one directory
      - name: Consolidate caches into Apps directory
        run: |
          ls -la
          mkdir apps
          mv appcache1/* apps/
          mv appcache2/* apps/
          mv appcache3/* apps/
          mv appcache4/* apps/
          cd apps
          ls -la
          ls -la java_test_webapp-master/
          cd ../

      ## JDK Installs

      # Install 11
      - name: Set up Java 11
        uses: actions/setup-java@v2
        with:
          distribution: 'temurin'
          java-version: 11
          cache: 'gradle'

      # Set the JDk variable
      - name: Set the required JDK variable
        run: |
          echo "ORG_GRADLE_PROJECT_jdk11=${JAVA_HOME}" >> $GITHUB_ENV

      # Install 16
      - name: Set up Java 16
        uses: actions/setup-java@v2
        with:
          distribution: 'temurin'
          java-version: 16
          cache: 'gradle'

      # Set the JDk variable
      - name: Set the required JDK variable
        run: |
          echo "ORG_GRADLE_PROJECT_jdk16=${JAVA_HOME}" >> $GITHUB_ENV

      # Install 8, last to set JAVA_HOME to 8
      - name: Set up Java 8
        uses: actions/setup-java@v2
        with:
          distribution: 'temurin'
          java-version: 8
          cache: 'gradle'

      # Set the JDk variable
      - name: Set the required JDK variable
        run: |
          echo "ORG_GRADLE_PROJECT_jdk8=${JAVA_HOME}" >> $GITHUB_ENV

      ## End JDK Install

      # Check ENV variables
      - name: Check environmental variables
        run: printenv | sort -f

      # End Java restore section

      # Restore the gradle cache
      - name: Restore the gradle caches
        uses: actions/cache@v2.1.6
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle
          restore-keys: |
            ${{ runner.os }}-gradle

      ## TESTING SECTION

      - name: Check new Java home path
        run: |
          echo "Current JAVA_HOME is ${JAVA_HOME}"
          # ls -la ${ORG_GRADLE_PROJECT_jdk8}


      # Replication of steps from ait README

      # Build the agent jar
      - name: Build newrelicJar
        if: ${{ failure() || success() }}
        run: |
          echo "JAVA_HOME=${ORG_GRADLE_PROJECT_jdk8}" >> $GITHUB_ENV
          echo "REVIEW ANY NEW ITEMS IN WORKSPACE"
          ls -la
          ./gradlew clean jar --parallel
          ls -la newrelic-agent/build/

      - name: CD to agent-integration-tests dir.
        run: |
          cd agent-integration-tests/
          ls -la

      - name: Check disk space
        run: |
          df -h
          du -a ${GITHUB_WORKSPACE} | sort -n -r | head -n 10

      ## WE LOSE THE VIRTUAL ENVIRONMENT ONCE WE LEAVE THE STEP
      ## TODO: This should really be a custom action, too many commands
      - name: Create virtualenv and run AITs - ${{ matrix.func_tests}}
        if: ${{ failure() || success() }}
        run: |
          cd agent-integration-tests
          echo "conf/testenv complains of the path below - creating symlink for now"
          ln -s ${GITHUB_WORKSPACE}/apps /home/runner/apps
          ln -s ${GITHUB_WORKSPACE}/newrelic-agent/build/newrelicJar/newrelic.jar ${GITHUB_WORKSPACE}/newrelic.jar
          echo "still complains of file not found"
          ls -la ${GITHUB_WORKSPACE}
          sudo apt install virtualenv
          virtualenv -p /usr/bin/python3.8 .
          echo "What version of maven are we using?"
          mvn --version
          echo "are the files created?"
          ls -la bin/
          echo "checking conf"
          ls -la conf/
          echo "runnig bin/activate"
          . bin/activate
          bin/pip3 install -r conf/requirements.txt
          echo "run autoconfigure"
          JAVA8JRE=${ORG_GRADLE_PROJECT_jdk8} \
          JAVA9JRE=${ORG_GRADLE_PROJECT_jdk9} \
          JAVA10JRE=${ORG_GRADLE_PROJECT_jdk10} \
          JAVA11JRE=${ORG_GRADLE_PROJECT_jdk11} \
          JAVA12JRE=${ORG_GRADLE_PROJECT_jdk12} \
          JAVA13JRE=${ORG_GRADLE_PROJECT_jdk13} \
          JAVA14JRE=${ORG_GRADLE_PROJECT_jdk14} \
          JAVA15JRE=${ORG_GRADLE_PROJECT_jdk15} \
          JAVA16JRE=${ORG_GRADLE_PROJECT_jdk16} \
          conf/autoconfigure
          echo "running conf/testenv java"
          . conf/testenv java
          echo "check local java config"
          cat conf/java_local_config.yml
          echo "Changing java_agent_dev_root values"
          sed -i 's|java_agent_dev_root: /home/runner/work/newrelic-java-agent/newrelic-java-agent|java_agent_dev_root: /home/runner/work/newrelic-java-agent/newrelic-java-agent/newrelic-agent/build/newrelicJar|' conf/java_local_config.yml
          sed -i 's|app_root: /home/runner/apps|app_root: /home/runner/work/newrelic-java-agent/newrelic-java-agent/apps|' conf/java_local_config.yml
          echo "verifying values have been changed"
          cat conf/java_local_config.yml
          echo "shell variables:"
          set | sort -f
          echo "GENERATE ARTIFACTS"
          ## artifacts section for testing
          mkdir testing-artifacts
          echo "was the dir created?"
          ls -la
          touch testing-artifacts/shell-variables.txt
          touch testing-artifacts/env-variables.txt
          set | sort -f > testing-artifacts/shell-variables.txt
          printenv | sort -f > testing-artifacts/env-variables.txt
          cp conf/java_local_config.yml testing-artifacts/
          echo "check the contents of testing-artifacts"
          ls -la testing-artifacts/
          echo "are we still in agent-integration-tests?"
          pwd
          ## End testing artifacts section
          echo "Check the current value of JAVA_HOME"
          echo "The current JAVA_HOME is ${JAVA_HOME}"
          echo "RUN THE TESTS"
          echo "Running ${{ matrix.func_basic_features }}"
          TEST_LOG_LEVEL=DEBUG TEST_SUPPRESS_METRIC_DEBUG=1 \
          ./bin/runtest.sh ${java_func_path}/${java_func_type}/${{ matrix.func_tests }}

      # Rename matrix item to remove problem characers
      - name: Rename Matrix item
        if: ${{ failure() || success() }}
        env:
          MATRIX: ${{ matrix.func_tests}}
        run: |
          MATRIX_ITEM=$(echo ${MATRIX} | sed 's|/|-|g')
          echo "MATRIX="${MATRIX_ITEM}"" >> $GITHUB_ENV

      # Capture Testing Artifacts
      - name: Capture testing artifacts
        if: ${{ failure() || success() }}
        uses: actions/upload-artifact@v2
        with:
          name: ${{ github.workflow }}-${{ github.job }}-${{ env.MATRIX }}
          path: |
            agent-integration-tests/testing-artifacts/*

      # Print Environmental variables
      - name: Print Environmental variables (verify activate has been sourced)
        run: |
          printenv |  sort -f
