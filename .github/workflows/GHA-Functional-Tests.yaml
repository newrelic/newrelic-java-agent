name: Java Functional Tests

on:
  pull_request:
    branches: [ main ] ## branches TBD
    types: [opened, synchronize, reopened, ready_for_review] ## Types TBD
  push:
    branches: [main]
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      BRANCH:
        description: "Specify branch (main is default)"
        required: false
        default: 'main'

jobs:
  java-functional-tests:
    name: Java ${{ matrix.java-version }} Functional Tests
    timeout-minutes: 120
    runs-on: ubuntu-latest
    env:
      default-branch: "main"
      # we use this in env var for conditionals (secrets can't be used in conditionals)
      GRADLE_KEY: ${{ secrets.GRADLE_ENTERPRISE_ACCESS_KEY }}
    strategy:
      ##max-parallel: 1 ## used to force sequential
      fail-fast: false
      matrix:
        java-version: [ 8, 11, 17, 18-ea ]
    steps:
      - uses: actions/checkout@v2
      #- uses: gradle/wrapper-validation-action@v1.0.4

      - name: Set up Java 8
        # https://github.com/actions/setup-java
        uses: actions/setup-java@v2
        with:
          distribution: 'temurin'
          java-version: 8

      - name: Save JAVA_HOME as JDK8 for later usage
        run: |
          echo "Current JAVA_HOME = ${JAVA_HOME}"
          echo "ORG_GRADLE_PROJECT_jdk8=$JAVA_HOME" >> $GITHUB_ENV

      - name: Set up Java 11
        uses: actions/setup-java@v2
        with:
          distribution: 'temurin'
          java-version: 11

      - name: Save JAVA_HOME as JDK11 for later usage
        run: |
          echo "Current JAVA_HOME = ${JAVA_HOME}"
          echo "ORG_GRADLE_PROJECT_jdk11=$JAVA_HOME" >> $GITHUB_ENV

      - name: Set up Java 17
        uses: actions/setup-java@v2
        with:
          distribution: 'temurin'
          java-version: 17

      - name: Save JAVA_HOME as JDK17 for later usage
        run: |
          echo "Current JAVA_HOME = ${JAVA_HOME}"
          echo "ORG_GRADLE_PROJECT_jdk17=$JAVA_HOME" >> $GITHUB_ENV

      - name: Set up Java 18-ea
        uses: actions/setup-java@v2
        with:
          distribution: 'temurin'
          java-version: 18-ea

      - name: Save JAVA_HOME as JDK18 for later usage
        run: |
          echo "Current JAVA_HOME = ${JAVA_HOME}"
          echo "ORG_GRADLE_PROJECT_jdk18=$JAVA_HOME" >> $GITHUB_ENV

      - name: Check environmental variables
        run: printenv | sort -f

      - name: Set gradle.properties
        run: |
          sed -i -e "s|jdk8=8|jdk8=${ORG_GRADLE_PROJECT_jdk8}|
          s|jdk11=11|jdk11=${ORG_GRADLE_PROJECT_jdk11}|
          s|jdk17=17|jdk17=${ORG_GRADLE_PROJECT_jdk17}|
          s|jdk18=18|jdk18=${ORG_GRADLE_PROJECT_jdk18}|" gradle.properties.gha
          cat gradle.properties.gha
          rm gradle.properties
          mv gradle.properties.gha gradle.properties

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2

      - name: Build newrelicJar
        if: ${{ env.GRADLE_KEY != '' }}
        env:
          CI: GHA
          JAVA_HOME: ${{ env.ORG_GRADLE_PROJECT_jdk8 }}
          GRADLE_ENTERPRISE_ACCESS_KEY: 34.229.76.228=${{ secrets.GRADLE_ENTERPRISE_ACCESS_KEY }}
          GRADLE_CACHE_USER: gha
          GRADLE_CACHE_PASSWORD: ${{ secrets.GRADLE_CACHE_PASSWORD }}
          JRE: jre${{ matrix.java-version }}
          LANGUAGE: java
          TEST_TYPE: functional
        run: |
          # echo "JAVA_HOME=${ORG_GRADLE_PROJECT_jdk8}" >> $GITHUB_ENV
          echo "REVIEW ANY NEW ITEMS IN WORKSPACE"
          ls -la
          ./gradlew clean jar --parallel --scan -Dscan.uploadInBackground=false --build-cache
          ls -la newrelic-agent/build/

      - name: Build newrelicJar w/o GE
        if: ${{ env.GRADLE_KEY == '' }}
        env:
          JAVA_HOME: ${{ env.ORG_GRADLE_PROJECT_jdk8 }}
        run: |
          echo "*** NOT PUBLISHING BUILD SCANS ***"
          ls -la
          cat settings.gradle
          ./gradlew clean jar --parallel
          ls -la newrelic-agent/build/

      - name: Run functional tests on ${{ matrix.java-version }}
        if: ${{ env.GRADLE_KEY != '' }}
        env:
          CI: GHA
          JAVA_HOME: ${{ env.ORG_GRADLE_PROJECT_jdk8 }}
          GRADLE_ENTERPRISE_ACCESS_KEY: 34.229.76.228=${{ secrets.GRADLE_ENTERPRISE_ACCESS_KEY }}
          GRADLE_CACHE_USER: gha
          GRADLE_CACHE_PASSWORD: ${{ secrets.GRADLE_CACHE_PASSWORD }}
          JRE: jre${{ matrix.java-version }}
          LANGUAGE: java
          TEST_TYPE: functional
        run: |
          ./gradlew --console=plain --parallel :functional_test:test -Ptest${{ matrix.java-version }} --continue --scan -Dscan.uploadInBackground=false --build-cache

      - name: Run functional tests on ${{ matrix.java-version }} w/o GE
        if: ${{ env.GRADLE_KEY == '' }}
        env:
          JAVA_HOME: ${{ env.ORG_GRADLE_PROJECT_jdk8 }}
        run: |
          ./gradlew --console=plain --parallel :functional_test:test -Ptest${{ matrix.java-version }} --continue

      - name: Capture build reports
        if: ${{ failure() }}
        uses: actions/upload-artifact@v2
        with:
          name: functional-tests-results-java-${{ matrix.java-version }}
          # The regex for the path below will capture functional test HTML reports generated by gradle for all
          # related modules: (functional_test, newrelic-scala-api, newrelic-scala-cats-api, :newrelic-cats-effect3-api, newrelic-scala-zio-api).
          # However, it's critical that the previous build step does a ./gradlew clean or the regex will capture test reports
          # that were leftover in unrelated modules for unit and instrumentation tests.
          path: |
            **/build/reports/tests/*
