name: Scala Functional Tests

on:
  workflow_dispatch:
    inputs:
      agent-ref:
        description: 'The ref (branch, SHA, tag?) to run the tests on'
        required: false
        default: 'main'
        type: string
  workflow_call:
    inputs:
      agent-ref:
        description: 'The ref (branch, SHA, tag?) to run the tests on'
        required: false
        default: 'main'
        type: string

jobs:
  scala-functional-tests:
    name: Java ${{ matrix.java-version }}
    timeout-minutes: 120
    runs-on: ubuntu-20.04
    strategy:
      ##max-parallel: 1 ## used to force sequential
      fail-fast: false
      matrix:
        java-version: [8, 11]
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ inputs.agent-ref || github.ref || 'main' }}

      - name: Set up Java 8
        # https://github.com/actions/setup-java
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: 8

      - name: Save JAVA_HOME as JDK8 for later usage
        run: |
          echo "Current JAVA_HOME = ${JAVA_HOME}"
          echo "ORG_GRADLE_PROJECT_jdk8=$JAVA_HOME" >> $GITHUB_ENV

      - name: Set up Java 11
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: 11

      - name: Save JAVA_HOME as JDK11 for later usage
        run: |
          echo "Current JAVA_HOME = ${JAVA_HOME}"
          echo "ORG_GRADLE_PROJECT_jdk11=$JAVA_HOME" >> $GITHUB_ENV

      - name: Check environmental variables
        run: printenv | sort -f

      - name: Set gradle.properties
        run: |
          sed -i -e "s|jdk8=8|jdk8=${ORG_GRADLE_PROJECT_jdk8}|
          s|jdk11=11|jdk11=${ORG_GRADLE_PROJECT_jdk11}|" gradle.properties.gha
          cat gradle.properties.gha
          rm gradle.properties
          mv gradle.properties.gha gradle.properties

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2

      - name: Build newrelicJar
        env:
          JAVA_HOME: ${{ env.ORG_GRADLE_PROJECT_jdk8 }}
        run: |
          # echo "JAVA_HOME=${ORG_GRADLE_PROJECT_jdk8}" >> $GITHUB_ENV
          echo "REVIEW ANY NEW ITEMS IN WORKSPACE"
          ls -la
          ./gradlew clean jar --parallel
          ls -la newrelic-agent/build/

      - name: Run functional tests against version defined in ${{ matrix.java-version }} (attempt 1)
        id: run_tests_1
        continue-on-error: true
        timeout-minutes: 25
        env:
          JAVA_HOME: ${{ env.ORG_GRADLE_PROJECT_jdk8 }}
        run: |
          # Removed ":newrelic-cats-effect3-api:test" temporarily
          ./gradlew --console=plain --parallel :newrelic-scala-api:test :newrelic-scala-cats-api:test :newrelic-scala-zio-api:test :newrelic-scala-monix-api:test -PincludeScala -Ptest${{ matrix.java-version }} --continue

      - name: Run functional tests against version defined in ${{ matrix.java-version }} (attempt 2)
        id: run_tests_2
        continue-on-error: true
        if: steps.run_tests_1.outcome == 'failure'
        timeout-minutes: 25
        env:
          JAVA_HOME: ${{ env.ORG_GRADLE_PROJECT_jdk8 }}
        run: |
          # Removed ":newrelic-cats-effect3-api:test" temporarily
          ./gradlew --console=plain --parallel :newrelic-scala-api:test :newrelic-scala-cats-api:test :newrelic-scala-zio-api:test :newrelic-scala-monix-api:test -PincludeScala -Ptest${{ matrix.java-version }} --continue

      - name: Run functional tests against version defined in ${{ matrix.java-version }} (attempt 3)
        if: steps.run_tests_2.outcome == 'failure'
        timeout-minutes: 25
        env:
          JAVA_HOME: ${{ env.ORG_GRADLE_PROJECT_jdk8 }}
        run: |
          # Removed ":newrelic-cats-effect3-api:test" temporarily
          ./gradlew --console=plain --parallel :newrelic-scala-api:test :newrelic-scala-cats-api:test :newrelic-scala-zio-api:test :newrelic-scala-monix-api:test -PincludeScala -Ptest${{ matrix.java-version }} --continue

      # Capture HTML build result in artifacts
      - name: Capture build reports
        if: ${{ failure() }}
        uses: actions/upload-artifact@v3
        with:
          name: functional-tests-results-java-${{ matrix.java-version }}
          # The regex for the path below will capture functional test HTML reports generated by gradle for all
          # related modules: (functional_test, newrelic-scala-api, newrelic-scala-cats-api, :newrelic-cats-effect3-api, newrelic-scala-zio-api).
          # However, it's critical that the previous build step does a ./gradlew clean or the regex will capture test reports
          # that were leftover in unrelated modules for unit and instrumentation tests.
          path: |
            **/build/reports/tests/*
