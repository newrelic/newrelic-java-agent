name: Scala Instrumentation Tests

on:
  pull_request:
    branches: [ main ]
    types: [assigned, opened, synchronize, reopened, ready_for_review]
  push:
    branches: [main]
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      BRANCH:
        description: "Specify branch (main is default)"
        required: false
        default: 'main'

jobs:
  scala-instrumentation-tests:
    name: Scala ${{ matrix.scala }} on Java ${{ matrix.java-version }} Instrumentation Tests
    timeout-minutes: 120
    runs-on: ubuntu-latest
    env:
      default-branch: "main"
      # we use this in env var for conditionals (secrets can't be used in conditionals)
      AWS_KEY: ${{ secrets.AWS_ACCESS_KEY_ID }}
      GRADLE_KEY: ${{ secrets.GRADLE_ENTERPRISE_ACCESS_KEY }}
    strategy:
      ##max-parallel: 1 ## used to force sequential
      fail-fast: false
      matrix:
        java-version: [8, 11]
        scala: ['2.10', '2.11', '2.12', '2.13']
        exclude:
          - java-version: 11
            scala: 2.10
          - java-version: 11
            scala: 2.11
    steps:
      - uses: actions/checkout@v2
      #- uses: gradle/wrapper-validation-action@v1.0.4

      - name: Set up Java 8
        # https://github.com/actions/setup-java
        uses: actions/setup-java@v2
        with:
          distribution: 'adopt'
          java-version: 8
          cache: gradle

      - name: Save JAVA_HOME as JDK8 for later usage
        run: |
          echo "Current JAVA_HOME = ${JAVA_HOME}"
          echo "ORG_GRADLE_PROJECT_jdk8=$JAVA_HOME" >> $GITHUB_ENV

      - name: Set up Java 11
        uses: actions/setup-java@v2
        with:
          distribution: 'adopt'
          java-version: 11

      - name: Save JAVA_HOME as JDK11 for later usage
        run: |
          echo "Current JAVA_HOME = ${JAVA_HOME}"
          echo "ORG_GRADLE_PROJECT_jdk11=$JAVA_HOME" >> $GITHUB_ENV

      - name: Check environmental variables
        run: printenv | sort -f

      ## AWS jars - plan to cache
      # secrets are available in the interface, but may NOT be edited.
      - name: Configure AWS Credentials
        if: ${{ env.AWS_KEY != '' }}        
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-2

      - name: Download S3 instrumentation jar zip
        run: aws s3 cp s3://nr-java-agent-s3-instrumentation/proprietary-jars-20200717.zip proprietary-jars.zip  ## 2020?
        if: ${{ env.AWS_KEY != '' }}        
      
      - name: Unzip the instrumentation jars
        if: ${{ env.AWS_KEY != '' }}        
        run: unzip proprietary-jars.zip


      - name: Log jars are in target libs
        if: ${{ env.AWS_KEY != '' }}        
        run: find instrumentation -name "*.jar"
      ## End AWS jars - plan to cache (check for cache, restore if required)

      - name: Build newrelicJar
        if: ${{ env.GRADLE_KEY != '' }}        
        env:
          CI: GHA
          JAVA_HOME: ${{ env.ORG_GRADLE_PROJECT_jdk8 }}
          GRADLE_ENTERPRISE_ACCESS_KEY: 3.88.106.22=${{ secrets.GRADLE_ENTERPRISE_ACCESS_KEY }}
          GRADLE_CACHE_USER: gha
          GRADLE_CACHE_PASSWORD: ${{ secrets.GRADLE_CACHE_PASSWORD }}
          JRE: jre${{ matrix.java-version }}
          LANGUAGE: scala
          SCALA_VERSION: scala${{ matrix.scala }}
          TEST_TYPE: instrumentation
        run: |
          # echo "JAVA_HOME=${ORG_GRADLE_PROJECT_jdk8}" >> $GITHUB_ENV
          echo "REVIEW ANY NEW ITEMS IN WORKSPACE"
          ls -la
          ./gradlew clean jar --parallel --scan -Dscan.uploadInBackground=false --build-cache
          ls -la newrelic-agent/build/

      - name: Build newrelicJar w/o GE
        if: ${{ env.GRADLE_KEY == '' }}
        env:
          JAVA_HOME: ${{ env.ORG_GRADLE_PROJECT_jdk8 }}
        run: |
          # echo "JAVA_HOME=${ORG_GRADLE_PROJECT_jdk8}" >> $GITHUB_ENV
          echo "REVIEW ANY NEW ITEMS IN WORKSPACE"
          ls -la
          ./gradlew clean jar --parallel
          ls -la newrelic-agent/build/

      - name: set gradle.properties
        run: |
          sed -i -e "s|jdk8=8|jdk8=${ORG_GRADLE_PROJECT_jdk8}|
          s|jdk11=11|jdk11=${ORG_GRADLE_PROJECT_jdk11}|" gradle.properties.gha
          cat gradle.properties.gha
          rm gradle.properties
          mv gradle.properties.gha gradle.properties

      - name: Run instrumentation tests for Java ${{ matrix.java-version }} and scala ${{ matrix.scala }}
        if: ${{ env.GRADLE_KEY != '' }}
        env:
          CI: GHA
          JAVA_HOME: ${{ env.ORG_GRADLE_PROJECT_jdk8 }}
          GRADLE_ENTERPRISE_ACCESS_KEY: 3.88.106.22=${{ secrets.GRADLE_ENTERPRISE_ACCESS_KEY }}
          GRADLE_CACHE_USER: gha
          GRADLE_CACHE_PASSWORD: ${{ secrets.GRADLE_CACHE_PASSWORD }}
          JRE: jre${{ matrix.java-version }}
          LANGUAGE: scala
          SCALA_VERSION: scala${{ matrix.scala }}
          TEST_TYPE: instrumentation
        run: ./gradlew --console=plain --parallel :instrumentation:test -Ptest${{ matrix.java-version }} -PnoInstrumentation -PnoScala -Pscala-${{ matrix.scala }} --continue --scan -Dscan.uploadInBackground=false --build-cache

      - name: Run instrumentation tests for Java ${{ matrix.java-version }} and scala ${{ matrix.scala }} w/o GE
        if: ${{ env.GRADLE_KEY == '' }}
        env:
          JAVA_HOME: ${{ env.ORG_GRADLE_PROJECT_jdk8 }}
        run: ./gradlew --console=plain --parallel :instrumentation:test -Ptest${{ matrix.java-version }} -PnoInstrumentation -PnoScala -Pscala-${{ matrix.scala }} --continue

      - name: Capture build reports
        if: ${{ failure() }}
        uses: actions/upload-artifact@v2
        with:
          name: instrumentation-results-java-${{ matrix.java-version }}-scala-${{ matrix.scala }}
          # The regex for the path below will capture instrumentation test HTML reports generated by gradle for all
          # instrumentation submodules: (httpclient-jdk11, jdbc-generic, spring-webflux-5.3.0, etc).
          path: |
            instrumentation/**/build/reports/tests/*
