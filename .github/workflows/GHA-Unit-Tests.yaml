name: Unit Tests

on:
  workflow_dispatch:
    inputs:
      agent-ref:
        description: 'The ref (branch, SHA, tag?) to run the tests on'
        required: false
        default: 'main'
        type: string
  workflow_call:
    inputs:
      agent-ref:
        description: 'The ref (branch, SHA, tag?) to run the tests on'
        required: false
        default: 'main'
        type: string

jobs:
  unit-test:
    name: Java ${{ matrix.java-version }}
    timeout-minutes: 150
    runs-on: ubuntu-20.04
    strategy:
      # max-parallel: 1 ## used to force sequential vs. concurrent
      fail-fast: false
      matrix:
        java-version: [8, 11, 17, 20]
    steps:
      - name: Checkout Java agent
        uses: actions/checkout@v3
        with:
          ref: ${{ inputs.agent-ref || github.ref || 'main' }}

      - name: Configure AWS Credentials
        if: ${{ env.AWS_KEY != '' }}
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-2

      - name: Setup environment
        uses: ./.github/actions/setup-environment

      - name: Run unit tests for each Java version as defined in the matrix (attempt 1)
        id: run_tests_1
        continue-on-error: true
        timeout-minutes: 35
        run: ./gradlew $GRADLE_OPTIONS test -x :functional_test:test -x :newrelic-scala-api:test -x :newrelic-scala-cats-api:test -x :newrelic-cats-effect3-api:test -x :newrelic-scala-monix-api:test -x :newrelic-scala-zio-api:test -Ptest${{ matrix.java-version }} -PnoInstrumentation --continue

      - name: Run unit tests for each Java version as defined in the matrix (attempt 2)
        id: run_tests_2
        continue-on-error: true
        timeout-minutes: 35
        if: steps.run_tests_1.outcome == 'failure'
        run: ./gradlew $GRADLE_OPTIONS test -x :functional_test:test -x :newrelic-scala-api:test -x :newrelic-scala-cats-api:test -x :newrelic-cats-effect3-api:test -x :newrelic-scala-monix-api:test -x :newrelic-scala-zio-api:test -Ptest${{ matrix.java-version }} -PnoInstrumentation --continue

      - name: Run unit tests for each Java version as defined in the matrix (attempt 3)
        timeout-minutes: 35
        if: steps.run_tests_2.outcome == 'failure'
        run: ./gradlew $GRADLE_OPTIONS test -x :functional_test:test -x :newrelic-scala-api:test -x :newrelic-scala-cats-api:test -x :newrelic-cats-effect3-api:test -x :newrelic-scala-monix-api:test -x :newrelic-scala-zio-api:test -Ptest${{ matrix.java-version }} -PnoInstrumentation --continue

      - name: Upload coverage to Codecov
        if: success()
        uses: codecov/codecov-action@v3
        with:
          files: '**/build/reports/jacoco/test/jacocoTestReport.xml'
          fail_ci_if_error: false #default is false, but being explicit about what to expect.

      - name: Capture Jacoco reports
        if: success()
        uses: actions/upload-artifact@v3
        with:
          name: jacoco-reports-java-${{ matrix.java-version }}
          path: |
            **/build/reports/jacoco/**

      - name: Capture build reports
        # If previous step fails, run this step regardless
        if: ${{ failure() }}
        uses: actions/upload-artifact@v3
        with:
          name: unit-tests-results-java-${{ matrix.java-version }}
          # The regex for the path below will capture unit test HTML reports generated by gradle for all
          # related modules: (agent-bridge, newrelic-java, newrelic-api, etc).
          # However, it's critical that the previous build step does a ./gradlew clean or the regex will capture test reports
          # that were leftover in unrelated modules for functional and instrumentation tests.
          path: |
            **/build/reports/tests/*
