name: Unit Tests

on:
  workflow_dispatch:
    inputs:
      agent-ref:
        description: 'The ref (branch, SHA, tag?) to run the tests on'
        required: false
        default: 'main'
        type: string
  workflow_call:
    inputs:
      agent-ref:
        description: 'The ref (branch, SHA, tag?) to run the tests on'
        required: false
        default: 'main'
        type: string

jobs:
  unit-test:
    name: Java ${{ matrix.java-version }}
    timeout-minutes: 120
    runs-on: ubuntu-20.04
    env:
      # we use this in env var for conditionals (secrets can't be used in conditionals)
      GRADLE_KEY: ${{ secrets.GRADLE_ENTERPRISE_ACCESS_KEY }}
    strategy:
      # max-parallel: 1 ## used to force sequential vs. concurrent
      fail-fast: false
      matrix:
        java-version: [8, 11, 17, 19]
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ inputs.agent-ref || github.ref || 'main' }}

      - name: Set up Java 8
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: 8

      - name: Save JAVA_HOME as JDK8 for later usage
        run: |
          echo "Current JAVA_HOME = ${JAVA_HOME}"
          echo "ORG_GRADLE_PROJECT_jdk8=$JAVA_HOME" >> $GITHUB_ENV

      - name: Set up Java 11
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: 11

      - name: Save JAVA_HOME as JDK11 for later usage
        run: |
          echo "Current JAVA_HOME = ${JAVA_HOME}"
          echo "ORG_GRADLE_PROJECT_jdk11=$JAVA_HOME" >> $GITHUB_ENV

      - name: Set up Java 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: 17

      - name: Save JAVA_HOME as JDK17 for later usage
        run: |
          echo "Current JAVA_HOME = ${JAVA_HOME}"
          echo "ORG_GRADLE_PROJECT_jdk17=$JAVA_HOME" >> $GITHUB_ENV

      # Install latest non-LTS Java version (we should only ever test one non-LTS version to keep test times reasonable)
      - name: Set up Java 19
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: 19

      - name: Save JAVA_HOME as JDK19 for later usage
        run: |
          echo "Current JAVA_HOME = ${JAVA_HOME}"
          echo "ORG_GRADLE_PROJECT_jdk19=$JAVA_HOME" >> $GITHUB_ENV

      - name: Check environmental variables
        run: printenv | sort -f

      - name: Set gradle.properties
        run: |
          sed -i -e "s|jdk8=8|jdk8=${ORG_GRADLE_PROJECT_jdk8}|
          s|jdk11=11|jdk11=${ORG_GRADLE_PROJECT_jdk11}|
          s|jdk17=17|jdk17=${ORG_GRADLE_PROJECT_jdk17}|
          s|jdk19=19|jdk19=${ORG_GRADLE_PROJECT_jdk19}|" gradle.properties.gha
          cat gradle.properties.gha
          rm gradle.properties
          mv gradle.properties.gha gradle.properties

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2

      - name: Run unit tests for each Java version as defined in the matrix
        if: ${{ env.GRADLE_KEY != '' }}
        env:
          CI: GHA
          JAVA_HOME: ${{ env.ORG_GRADLE_PROJECT_jdk8 }}
          GRADLE_ENTERPRISE_ACCESS_KEY: 34.229.76.228=${{ secrets.GRADLE_ENTERPRISE_ACCESS_KEY }}
          GRADLE_CACHE_USER: gha
          GRADLE_CACHE_PASSWORD: ${{ secrets.GRADLE_CACHE_PASSWORD }}
          JRE: jre${{ matrix.java-version }}
          LANGUAGE: polyglot
          TEST_TYPE: unit
        run: |
          ./gradlew --console=plain --parallel test -x :functional_test:test -x :newrelic-scala-api:test -x :newrelic-scala-cats-api:test -x :newrelic-cats-effect3-api:test -x :newrelic-scala-monix-api:test -x :newrelic-scala-zio-api:test -Ptest${{ matrix.java-version }} -PnoInstrumentation --continue --scan -Dscan.uploadInBackground=false --build-cache

      - name: Run unit tests for each Java version as defined in the matrix no build scan or cache
        if: ${{ env.GRADLE_KEY == '' }}
        env:
          JAVA_HOME: ${{ env.ORG_GRADLE_PROJECT_jdk8 }}
        run: |
          echo "*** NOT PUBLISHING BUILD SCANS ***"
          ./gradlew --console=plain --parallel test -x :functional_test:test -x :newrelic-scala-api:test -x :newrelic-scala-cats-api:test -x :newrelic-cats-effect3-api:test -x :newrelic-scala-monix-api:test -x :newrelic-scala-zio-api:test -Ptest${{ matrix.java-version }} -PnoInstrumentation --continue

      - name: Capture build reports
        # If previous step fails, run this step regardless
        if: ${{ failure() }}
        uses: actions/upload-artifact@v3
        with:
          name: unit-tests-results-java-${{ matrix.java-version }}
          # The regex for the path below will capture unit test HTML reports generated by gradle for all
          # related modules: (agent-bridge, newrelic-java, newrelic-api, etc).
          # However, it's critical that the previous build step does a ./gradlew clean or the regex will capture test reports
          # that were leftover in unrelated modules for functional and instrumentation tests.
          path: |
            **/build/reports/tests/*
