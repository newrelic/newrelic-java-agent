name: X - Reusable Test Workflow 

on:
  workflow_call:
    inputs:
      jre:
        description: 'The JRE that the tests will run on'
        default: '8'
        required: false
        type: string
    secrets:
      aws-access-key-id:
        required: true
      aws-secret-access-key:
        required: true
      gradle-enterprise-access-key:
        required: true
      gradle-cache-password:
        required: true

jobs:
  tests:
    name: Java ${{ inputs.jre }} Instrumentation Tests
    timeout-minutes: 60
    # needs: install-all-java
    runs-on: ubuntu-latest
    env:
      default-branch: "main"
    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ github.event.inputs.BRANCH || env.default-branch }}
      - uses: gradle/wrapper-validation-action@v1.0.4

      #NEW Install required JDKs
      # Install 8
      - name: Set up Java 8
        # https://github.com/actions/setup-java
        uses: actions/setup-java@v2
        with:
          distribution: 'adopt'
          java-version: 8
          cache: 'gradle'

      # Save new JDK variable
      - name: Save JAVA_HOME as JDK8 for later usage
        run: |
          echo "Current JAVA_HOME = ${JAVA_HOME}"
          echo "ORG_GRADLE_PROJECT_jdk8=$JAVA_HOME" >> $GITHUB_ENV

      # Install 11
      - name: Set up Java 11
        uses: actions/setup-java@v2
        with:
          distribution: 'adopt'
          java-version: 11

      # Save new JDK variable
      - name: Save JAVA_HOME as JDK11 for later usage
        run: |
          echo "Current JAVA_HOME = ${JAVA_HOME}"
          echo "ORG_GRADLE_PROJECT_jdk11=$JAVA_HOME" >> $GITHUB_ENV

      # Install 17
      - name: Set up Java 17
        uses: actions/setup-java@v2
        with:
          distribution: 'adopt'
          java-version: 17

      # Save new JDK variable
      - name: Save JAVA_HOME as JDK17 for later usage
        run: |
          echo "Current JAVA_HOME = ${JAVA_HOME}"
          echo "ORG_GRADLE_PROJECT_jdk17=$JAVA_HOME" >> $GITHUB_ENV

      # Check ENV variables
      - name: Check environmental variables
        run: printenv | sort -f

      ## AWS jars - plan to cache
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.aws-access-key-id }}
          aws-secret-access-key: ${{ secrets.aws-secret-access-key }}
          aws-region: us-east-2

      - name: Download S3 instrumentation jar zip
        run: aws s3 cp s3://nr-java-agent-s3-instrumentation/proprietary-jars-20200717.zip proprietary-jars.zip  ## 2020?

      - name: Unzip the instrumentation jars
        run: unzip proprietary-jars.zip

      - name: Log jars are in target libs
        run: find instrumentation -name "*.jar"
      ## End AWS jars - plan to cache (check for cache, restore if required)

      # Is newrelicJar present in newrelic-agent/build
      # TO DO: Below version number has to be dynamic
      - name: Build newrelicJar
        env:
          CI: GHA
          JAVA_HOME: ${{ env.ORG_GRADLE_PROJECT_jdk8 }}
          GRADLE_ENTERPRISE_ACCESS_KEY: 3.88.106.22=${{ secrets.gradle-enterprise-access-key }}
          GRADLE_CACHE_USER: gha
          GRADLE_CACHE_PASSWORD: ${{ secrets.gradle-cache-password }}
          JRE: jre${{ inputs.jre }}
          LANGUAGE: java
          TEST_TYPE: instrumentation
        run: |
          # echo "JAVA_HOME=${ORG_GRADLE_PROJECT_jdk8}" >> $GITHUB_ENV
          echo "REVIEW ANY NEW ITEMS IN WORKSPACE"
          ls -la
          cat settings.gradle
          ./gradlew clean jar --parallel --scan -Dscan.uploadInBackground=false --build-cache
          ls -la newrelic-agent/build/

      # GHA run instrumentation tests

      # Rewrite gradle.properties
      - name: set gradle.properties
        run: |
          sed -i -e "s|jdk8=8|jdk8=${ORG_GRADLE_PROJECT_jdk8}|
          s|jdk11=11|jdk11=${ORG_GRADLE_PROJECT_jdk11}|
          s|jdk17=17|jdk17=${ORG_GRADLE_PROJECT_jdk17}|" gradle.properties.gha
          cat gradle.properties.gha
          rm gradle.properties
          mv gradle.properties.gha gradle.properties

      # Run the build.
      - name: Run instrumentation tests for Java ${{ inputs.jre }}
        env:
          CI: GHA
          JAVA_HOME: ${{ env.ORG_GRADLE_PROJECT_jdk8 }}
          GRADLE_ENTERPRISE_ACCESS_KEY: 3.88.106.22=${{ secrets.gradle-enterprise-access-key }}
          GRADLE_CACHE_USER: gha
          GRADLE_CACHE_PASSWORD: ${{ secrets.gradle-cache-password }}
          JRE: jre${{ inputs.jre }}
          LANGUAGE: java
          TEST_TYPE: instrumentation
        run: |
          ./gradlew --console=plain :instrumentation:test -Ptest${{ inputs.jre }} -PnoScala --continue --scan -Dscan.uploadInBackground=false --build-cache

      # Capture HTML build result in artifacts
      - name: Capture build reports
        if: ${{ failure() }}
        uses: actions/upload-artifact@v2
        with:
          name: instrumentation-tests-results-java-${{ inputs.jre }}
          path: |
            instrumentation/**/build/reports/tests/*
