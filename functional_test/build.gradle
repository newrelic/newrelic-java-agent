import com.nr.builder.JarUtil

evaluationDependsOn(":newrelic-agent") // This is important because we need newrelic-agent to be configured before functional_test so the correct ("unversioned") jar name gets used

jar {
    manifest { attributes 'Premain-Class': 'com.newrelic.agent.test.agent.FunctionalAgent' }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation(project(":agent-bridge"))
    implementation(project(":agent-bridge-datastore"))
    implementation(project(":newrelic-weaver"))

    testImplementation(project(":functional_test:weave_test_impl"))

    // the newrelic-agent test classes
    testImplementation(project(path: ':newrelic-agent', configuration: 'tests'))

    // introspector classes for testing externals
    // this also drags in all the `api` dependencies in instrumentation-test
    testImplementation(project(":instrumentation-test"))

    testImplementation("commons-httpclient:commons-httpclient:3.1")
    testImplementation("org.hibernate:hibernate-jmx:3.3.2.GA") {
        exclude group: 'log4j'
        exclude group: 'org.slf4j'
    }
    testImplementation("org.hibernate:hibernate-core:3.3.2.GA")
    testImplementation("org.hibernate:hibernate-annotations:3.4.0.GA")
    testImplementation("org.slf4j:slf4j-nop:1.7.25")

    testImplementation("org.apache.tomcat.embed:tomcat-embed-core:8.5.32")

    testImplementation("javax.servlet.jsp:javax.servlet.jsp-api:2.3.1")
    testImplementation("javax.servlet:javax.servlet-api:3.1.0")
    testImplementation("org.apache.tomcat:juli:6.0.26")

    testImplementation("org.apache.solr:solr-core:4.0.0") {
        exclude group: 'commons-httpclient'
    }
    testImplementation("commons-dbcp:commons-dbcp:1.2.2")
    testImplementation("com.sun.grizzly:grizzly-utils:1.9.3")

    testImplementation("org.apache.myfaces.core:myfaces-impl:2.3.10")
    testImplementation("org.apache.myfaces.core:myfaces-api:2.3.10")
    testImplementation("com.sun.faces:jsf-impl:2.2.20")
    testImplementation("com.sun.faces.extensions:jsf-extensions-test-time:2.0")

    testImplementation("org.ow2.asm:asm-commons:$asmVersion")
    testImplementation("org.ow2.asm:asm-tree:$asmVersion")
    testImplementation("org.ow2.asm:asm-analysis:$asmVersion")
    testImplementation("org.ow2.asm:asm-util:$asmVersion")

    // javaassist is used by hibernate
    testImplementation("javassist:javassist:3.3")

    testImplementation("javax.ws.rs:jsr311-api:1.1.1")
    testImplementation("com.sun.jersey:jersey-core:1.9.1")
    testImplementation("javax.xml:jaxrpc-api:1.1")

    testImplementation("jakarta.xml.ws:jakarta.xml.ws-api:2.3.3")

    testImplementation("org.apache.derby:derby:10.11.1.1")
    testImplementation("org.apache.struts:struts-core:1.3.5")
    testImplementation("org.mongodb:mongo-java-driver:3.1.0")

    testImplementation("info.batey.kafka:kafka-unit:1.0")
    testImplementation("com.googlecode.json-simple:json-simple:1.1")

    testImplementation("org.springframework.cloud:spring-cloud-starter-eureka:1.3.6.RELEASE") {
        exclude module: 'spring-boot-starter-logging'
        exclude module: 'logback-classic'
        exclude module: 'joda-time'

    }
    testImplementation("com.ning:async-http-client:1.9.40")
    testImplementation("javax.ws.rs:javax.ws.rs-api:2.1")

    //Webservices updates for jakarta ee 9
    implementation('jakarta.jws:jakarta.jws-api:3.0.0')
    testImplementation('jakarta.jws:jakarta.jws-api:3.0.0')
    testImplementation('jakarta.ws.rs:jakarta.ws.rs-api:3.0.0')
    testImplementation('jakarta.xml.bind:jakarta.xml.bind-api:4.0.0')
    testImplementation('jakarta.xml.ws:jakarta.xml.ws-api:4.0.0')
}

def functional_test_args = [
        "-javaagent:${project.jar.archivePath.absolutePath}",
        "-javaagent:${JarUtil.getNewRelicJar(project(':newrelic-agent')).absolutePath}",
        "-Dnewrelic.config.file=${project(':newrelic-agent').projectDir}/src/test/resources/com/newrelic/agent/config/newrelic.yml",
        "-Dnewrelic.unittest=true",
        "-Dnewrelic.config.startup_log_level=warn",
        "-Dnewrelic.debug=$newrelicDebug"
]

test {
    dependsOn("jar")
    dependsOn("weave_test:jar")

    forkEvery = 1
    maxParallelForks = Runtime.runtime.availableProcessors()
    //testLogging.showStandardStreams = true

    // when using an early access Java version, we need to pass an extra param to the agent
    if (project.hasProperty("test20")) {
        jvmArgs += ["-Dnewrelic.config.experimental_runtime=true"]
    }

    minHeapSize = "256m"
    maxHeapSize = "768m"

    beforeSuite {
        descriptor ->
            // We get two notifications per Test class. One of them is simply the Gradle executor used to run the test
            // We filter that one out and only log the Test class name with this null check.
            if (descriptor.getClassName() != null) {
                logger.lifecycle("Running test suite: " + descriptor.getClassName())
                //If we want to expand the FunctionalAgent we'll have to do some custom gradle stuff here
            }
    }

    jvmArgs functional_test_args + "-Dnewrelic.config.extensions.dir=${projectDir}/src/test/resources/xml_files"
}

afterEvaluate {
    compileTestJava.dependsOn project(":newrelic-agent").getTasksByName("newrelicJar", false)
    test.dependsOn project(":newrelic-agent").getTasksByName("newrelicJar", false)
}
