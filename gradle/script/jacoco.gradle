apply plugin: 'java'
apply plugin: 'jacoco'

jacoco{
    toolVersion = "0.8.14"
}

test {
    jacoco {
        enabled = true
        destinationFile = layout.buildDirectory.file('jacoco/test.exec').get().asFile
        classDumpDir = layout.buildDirectory.dir('jacoco/classpathdumps').get().asFile
        destinationFile = layout.buildDirectory.file("jacoco/${name}.exec").get().asFile

    }
    finalizedBy jacocoTestReport // report is always generated after tests run
}

jacocoTestReport {

    dependsOn test
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it,
                    exclude: ['**/*NoOp*.class',
                              '**/*Exception.class',
                              '**/*Error.class',
                              '**/Dummy*.class',
                              '**/*Type.class',
                              '**/*Type$*.class',
                              '**/*Parameters.class',
                              '**/*Parameters$*.class',
                              'com/newrelic/agent/InternalLimitExceeded.class',
                              'com/newrelic/agent/PrivateApiImpl.class',
                              'com/newrelic/agent/introspec/*.class',
                              'com/newrelic/agent/jmx/metrics/*Generator.class',
                              'com/newrelic/agent/jmx/metrics/*Generator$*.class',
                              'com/newrelic/agent/bridge/external/ExternalParametersFactory.class',
                              'com/newrelic/agent/instrumentation/tracing/TraceDetailsBuilder*.class',
                              'com/newrelic/agent/model/ApdexPerfZone.class',
                              'com/newrelic/agent/model/CountedDuration.class',
                              'com/newrelic/agent/model/PathHashes.class',
                              'com/newrelic/agent/model/SpanCategory.class',
                              'com/newrelic/agent/model/SyntheticsIds.class',
                              'com/newrelic/agent/model/TimeoutCause.class',
                              'com/newrelic/agent/model/TransactionTiming.class',
                              'com/newrelic/agent/model/TransactionTiming$*.class',
                              'com/newrelic/api/agent/NewRelic.class',
                              'com/newrelic/weave/verification/*.class',
                              'com/newrelic/agent/bridge/datastore/DatastoreMetrics.class',
                              'com/newrelic/api/agent/ApplicationNamePriority.class',
                              'com/newrelic/agent/bridge/TransactionNamePriority.class',
                              'com/newrelic/weave/utils/Synchronized*.class',
                              'com/newrelic/agent/introspec/internal/IgnoringJarCollectorService.class',
                              'com/newrelic/agent/introspec/internal/FailingWeavePackageListener.class',
                              'com/newrelic/agent/tracers/UltraLightTracer.class',
                              'com/newrelic/agent/core/CoreServiceImpl.class',
                              'com/newrelic/agent/Deployments.class',
                              'com/newrelic/agent/LifecycleObserver$*.class',
                              'com/newrelic/agent/LifecycleObserver.class',
                              'com/newrelic/agent/InitProblemClasses.class',
                              'com/newrelic/agent/reinstrument/ReinstrumentUtils.class',
                              'com/newrelic/agent/AsyncApiImpl.class',
                              'com/newrelic/agent/tracers/jasper/JasperClassFactory.class',
                              'com/newrelic/agent/tracers/jasper/GeneratorVisitTracerFactory.class'
                    ])
        }))
    }
    reports {
        xml.required = true
        html.outputLocation = layout.buildDirectory.dir('reports/jacoco')
    }

}