apply plugin: 'java-library'

configurations {
    includeInJar
}

dependencies {
    configurations.compile.extendsFrom(configurations.includeInJar)
}

jar {
    // Allow any java projects to bundle third party libraries into the jar
    from {
        configurations.includeInJar.collect {
            it.isDirectory() ? it : zipTree(it)
        }
    }
    exclude("META-INF/maven/**")
    eachFile {
        // Exclude any MR Jar files that aren't ours. The deps patch task does not like
        // MR Jar files and it doesn't know what to do with them.
        if (getPath().contains("META-INF/versions") && !getPath().contains("com/newrelic")) {
            exclude()
        }
    }

    includeEmptyDirs false
}

// JDK7 is required for scala 2.9 and 2.10. The scala gradle plugin does not allow changing the java compiler at runtime,
// so we must set JAVA_HOME to point to 1.7 and set the java plugin to compile with 1.8
task requiresJava7 {
    doLast {
        if (!project.hasProperty('jdk7')) {
            throw new GradleException("Please set the jdk7 property to a valid jdk1.7 path in ~/.gradle/gradle.properties")
        }
    }
}

// Some modules need to be compiled with JDK8.
task requiresJava8 {
    doLast {
        if (!project.hasProperty('jdk8')) {
            throw new GradleException("Please set the jdk8 property to a valid jdk1.8 path in ~/.gradle/gradle.properties")
        }
        if (!JavaVersion.current().isJava8Compatible()) {
            throw new GradleException("Please set JAVA_HOME to a 1.8 JDK (detected ${JavaVersion.current()})")
        }
    }
}

tasks.withType(Javadoc) {
    options.addStringOption('Xdoclint:none', '-quiet')
}

tasks.withType(ScalaCompile) {
    options.fork = true
}

compileJava.dependsOn 'requiresJava7'
compileJava.dependsOn 'requiresJava8'

compileJava.options.encoding = 'UTF-8'
// Compile all Java projects with 1.8
compileJava.options.fork = true
compileJava.options.forkOptions.executable = jdk8 + '/bin/javac'
compileJava.options.compilerArgs += '-proc:none'

compileTestJava.options.encoding = 'UTF-8'
// Compile all Java test projects with 1.8
compileTestJava.options.fork = true
compileTestJava.options.forkOptions.executable = jdk8 + '/bin/javac'
compileTestJava.options.compilerArgs += '-proc:none'

compileTestJava {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}

sourceCompatibility = JavaVersion.VERSION_1_7
targetCompatibility = JavaVersion.VERSION_1_7

// Compile all Java projects with jdk7 bootstrap classpath (to properly support target compatibility)
compileJava.options.bootstrapClasspath = files("${jdk7}/jre/lib/rt.jar", "${jdk7}/lib/jsse.jar")

// There is no clear way to run the same task under multiple JDKs, so we use the following gradle properties
// and jenkins matrix plugin to run the instrumentation module tests
//
// These properties must be set in gradle.properties to point to the java executable.
// For example: java8=/Library/Java/JavaVirtualMachines/jdk1.8.0_45.jdk/Contents/Home/bin/java
test {
    if (project.hasProperty("test15")) {
        executable = jdk15 + '/bin/java'
        useJUnit {
            excludeCategories 'com.newrelic.test.marker.Java15IncompatibleTest'
        }
    }
    if (project.hasProperty("test14")) {
        executable = jdk14 + '/bin/java'
        useJUnit {
            excludeCategories 'com.newrelic.test.marker.Java14IncompatibleTest'
        }
    }
    if (project.hasProperty("test13")) {
        executable = jdk13 + '/bin/java'
        useJUnit {
            excludeCategories 'com.newrelic.test.marker.Java13IncompatibleTest'
        }
    }
    if (project.hasProperty("test12")) {
        executable = jdk12 + '/bin/java'
        useJUnit {
            excludeCategories 'com.newrelic.test.marker.Java12IncompatibleTest'
        }
    }
    if (project.hasProperty("testCoretto8")) {
        executable = coretto8 + '/bin/java'
        useJUnit {
            excludeCategories 'com.newrelic.test.marker.Java8IncompatibleTest'
        }
    }
    if (project.hasProperty("testDragonWell8")) {
        executable = dragonWell8 + '/bin/java'
        useJUnit {
            excludeCategories 'com.newrelic.test.marker.Java8IncompatibleTest'
        }
    }
    if (project.hasProperty("testZulu11")) {
        executable = zulu11 + '/bin/java'
        useJUnit {
            excludeCategories 'com.newrelic.test.marker.Java11IncompatibleTest'
        }
    }
    if (project.hasProperty("testZing8")) {
        executable = zing8 + '/bin/java'
        useJUnit {
            excludeCategories 'com.newrelic.test.marker.Java8IncompatibleTest'
        }
    }
    if (project.hasProperty("testZing11")) {
        executable = zing11 + '/bin/java'
        useJUnit {
            excludeCategories 'com.newrelic.test.marker.Java11IncompatibleTest'
        }
    }
    if (project.hasProperty("test11")) {
        executable = jdk11 + '/bin/java'
        useJUnit {
            excludeCategories 'com.newrelic.test.marker.Java11IncompatibleTest'
        }
    }
    if (project.hasProperty("test10")) {
        executable = jdk10 + '/bin/java'
        useJUnit {
            excludeCategories 'com.newrelic.test.marker.Java10IncompatibleTest'
        }
    }
    if (project.hasProperty("test9")) {
        executable = jdk9 + '/bin/java'
        useJUnit {
            excludeCategories 'com.newrelic.test.marker.Java9IncompatibleTest'
        }
    }
    if (project.hasProperty("test8")) {
        executable = jdk8 + '/bin/java'
        useJUnit {
            excludeCategories 'com.newrelic.test.marker.Java8IncompatibleTest'
        }
    }
    if (project.hasProperty("test7")) {
        executable = jdk7 + '/bin/java'
        useJUnit {
            excludeCategories 'com.newrelic.test.marker.Java7IncompatibleTest'
        }
    }

    if (project.hasProperty("development")) {
        environment "ENVIRONMENT", "development"
    }

    testLogging {
        events "failed"
        exceptionFormat "short"
    }
}

dependencies {
    testImplementation("junit:junit:4.12")
    testImplementation("org.mockito:mockito-core:3.9.0")
    testImplementation("org.hamcrest:hamcrest-library:1.3")
    testImplementation(project(":test-annotations"))
}
