import play.routes.compiler.InjectedRoutesGenerator$
import play.routes.compiler.RoutesCompiler
import play.routes.compiler.RoutesCompiler$
import scala.collection.JavaConversions

apply plugin: 'scala'
scala.zincVersion = "1.2.5"

isScalaProjectEnabled(project, "scala-2.11")

buildscript {
    dependencies {
        classpath 'com.typesafe.play:routes-compiler_2.11:2.6.0'
    }
    repositories {
        mavenCentral()
    }
}

sourceSets.test.scala.srcDir "src/test/java"
sourceSets.test.java.srcDirs = []

compileJava.options.bootstrapClasspath = null

dependencies {
    implementation(project(":newrelic-api"))
    implementation(project(":agent-bridge"))
    implementation(project(":newrelic-weaver-api"))
    implementation(project(":newrelic-weaver-scala-api"))
    implementation("org.scala-lang:scala-library:2.11.+")
    implementation("com.typesafe.play:play-server_2.11:2.6.13")
    testImplementation("com.typesafe.play:play-test_2.11:2.6.13")
    testImplementation("com.typesafe.play:play-java_2.11:2.6.13")
    testImplementation("com.jayway.restassured:rest-assured:2.7.0")
    testImplementation("jakarta.xml.ws:jakarta.xml.ws-api:2.3.3")
}

jar {
    manifest { attributes 'Implementation-Title': 'com.newrelic.instrumentation.play-2.6.13' }
}

verifyInstrumentation {
    passesOnly 'com.typesafe.play:play-server_2.12:[2.6.13,2.7.0-M1)'
    passesOnly 'com.typesafe.play:play-server_2.11:[2.6.13,2.7.0-M1)'

    // build snapshots
    excludeRegex '.*-[0-9]{4}-[0-9]{2}-[0-9]{2}-[a-z0-9]{7}$'
}

test {
    onlyIf {
        !project.hasProperty('test7')
    }
}


compileTestScala {
    def routeFile = file("src/test/resources/conf/routes")
    def generatedSourcesDir = layout.buildDirectory.dir("generated/scala")

    options.compilerArgs += '-proc:none'

    inputs.file(routeFile)
    localState.register(generatedSourcesDir)

    // this manually compiles the conf/routes file into an Routes.scala file, which is subsequently read on startup by our test application
    doFirst {
        def RoutesCompiler.RoutesCompilerTask routesCompilerTask = new RoutesCompiler.RoutesCompilerTask(
                routeFile, JavaConversions.asScalaBuffer(Collections.<String> emptyList()).toSeq(),
                true, false, false)
        RoutesCompiler$.MODULE$.compile(routesCompilerTask, InjectedRoutesGenerator$.MODULE$, generatedSourcesDir.get().asFile)
        source generatedSourcesDir
    }
}

clean {
    // Clean up any residual generated Routes files to avoid duplicate classes
    delete 'src/test/scala/router'
}

site {
    title 'Play'
    type 'Appserver'
}
