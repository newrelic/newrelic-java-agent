apply plugin: 'scala'
scala.zincVersion = "1.2.5"

isScalaProjectEnabled(project, "scala-2.11")

compileJava.options.bootstrapClasspath = null

dependencies {
    implementation(project(":agent-bridge"))
    implementation(project(":newrelic-weaver-scala-api"))
    implementation("org.scala-lang:scala-library:2.11.12")
    implementation("com.typesafe.play:play-ws_2.11:2.6.0")
    testImplementation("com.typesafe.play:play-ahc-ws_2.11:2.6.0")
    testImplementation("com.typesafe.play:play-ahc-ws-standalone_2.11:1.1.2")
}

jar {
    manifest { attributes 'Implementation-Title': 'com.newrelic.instrumentation.play-ws-2.6.0' }
}

verifyInstrumentation {
    passesOnly 'com.typesafe.play:play-ws_2.12:[2.6.0,)'
    passesOnly 'com.typesafe.play:play-ws_2.11:[2.6.0,)'

    excludeRegex '.*-RC[0-9]*'
}

test {
    // These instrumentation tests only run on Java 8 regardless of the -PtestN gradle property that is set.
    // The jvmArgs properties get set for a specific version of Java in java.gradle when using -PtestN but then this overrides
    // that to always run on Java 8 instead of version N, potentially causing an error if the options are invalid in Java 8.
    if (project.hasProperty("test9")) {
        enabled = false
    } else if (project.hasProperty("test10")) {
        enabled = false
    } else if (project.hasProperty("test11")) {
        enabled = false
    } else if (project.hasProperty("test12")) {
        enabled = false
    } else if (project.hasProperty("test13")) {
        enabled = false
    } else if (project.hasProperty("test14")) {
        enabled = false
    } else if (project.hasProperty("test15")) {
        enabled = false
    } else if (project.hasProperty("test16")) {
        enabled = false
    } else if (project.hasProperty("test17")) {
        enabled = false
    } else if (project.hasProperty("test18")) {
        enabled = false
    }
}

site {
    title 'Play WS'
    type 'Messaging'
}
