import com.nr.builder.JarUtil

apply plugin: 'java'

subprojects {
    dependencies {
        // introspector classes for testing externals
        testImplementation(project(":instrumentation-test"))
    }
}

ext.moduleName = "com.greetings"

dependencies {
    implementation("junit:junit:4.13")
}

compileJava {
    inputs.property("moduleName", "com.greetings")
    doFirst {
        options.compilerArgs = [
                '--module-path', classpath.asPath,
                '--patch-module', "$moduleName=" + files(sourceSets.main.java.srcDirs).asPath,
        ]
        classpath = files()
    }
    // Boot classpath no longer works in JDK 9+ so we should ignore it here
    options.bootstrapClasspath = null
}

java {
    toolchain {
        // Compile with Java 11 to test module support
        languageVersion.set(JavaLanguageVersion.of(11))
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
    options.fork = true
}

def module_test_args = [
        "-javaagent:${project.jar.archivePath.absolutePath}",
        "-javaagent:${JarUtil.getNewRelicJar(project(":newrelic-agent")).absolutePath}",
        "-Dnewrelic.config.file=${project(':newrelic-agent').projectDir}/src/test/resources/com/newrelic/agent/config/newrelic.yml",
        "-Dnewrelic.unittest=true",
        "-Dnewrelic.config.startup_log_level=warn",
        "-Dnewrelic.debug=$newrelicDebug",
        "--module-path=lib:out/production/classes",
        "--add-modules com.greetings",
        "--module junit/org.junit.runner.JUnitCore"
]

test {
    inputs.property("test.jdk", "jdk9")
    dependsOn(project(":newrelic-agent").getTasksByName("newrelicJar", false))
    forkEvery = 1
    maxParallelForks = Runtime.runtime.availableProcessors()

    minHeapSize = "256m"
    maxHeapSize = "256m"

    // We have to set this because java.gradle sets the executable.  This project should only have a subset of
    // java.gradle applied to it rather than having to reset this after the fact.
    javaLauncher = javaToolchains.launcherFor {
        languageVersion = JavaLanguageVersion.of(9)
    }
    executable = null

    beforeSuite {
        descriptor ->
            // We get two notifications per Test class. One of them is simply the Gradle executor used to run the test
            // We filter that one out and only log the Test class name with this null check.
            if (descriptor.getClassName() != null) {
                logger.lifecycle("Running test suite: " + descriptor.getClassName())
            }
    }
}

javadoc {
    onlyIf { JavaVersion.current().isJava9Compatible() }
}
