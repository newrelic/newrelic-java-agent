/*
 *
 *  * Copyright 2020 New Relic Corporation. All rights reserved.
 *  * SPDX-License-Identifier: Apache-2.0
 *
 */

package com.newrelic.agent.database;

import com.google.common.io.Files;
import com.newrelic.agent.MockConfigService;
import com.newrelic.agent.MockCoreService;
import com.newrelic.agent.MockServiceManager;
import com.newrelic.agent.bridge.datastore.DatastoreVendor;
import com.newrelic.agent.bridge.datastore.UnknownDatabaseVendor;
import com.newrelic.agent.config.AgentConfig;
import com.newrelic.agent.service.ServiceFactory;
import com.newrelic.agent.service.ServiceManager;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;

import java.io.File;
import java.net.URL;
import java.nio.charset.StandardCharsets;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.text.MessageFormat;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertNull;
import static org.junit.Assert.assertTrue;

import static org.mockito.Mockito.RETURNS_DEEP_STUBS;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

public class DatabaseStatementResponseParserTest {
    DatabaseStatementParser parser;
    private static AgentConfig agentConfig;

    @BeforeClass
    public static void beforeClass() throws Exception {
        MockCoreService.getMockAgentAndBootstrapTheServiceManager();

        MockServiceManager sm = new MockServiceManager();
        ServiceFactory.setServiceManager(sm);
        agentConfig = mock(AgentConfig.class, RETURNS_DEEP_STUBS);
        MockConfigService configService = new MockConfigService(agentConfig);
        sm.setConfigService(configService);

        when(agentConfig.getTransactionTracerConfig().isExecCallSqlRegexDisabled()).thenReturn(false);
    }

    @AfterClass
    public static void afterClass() throws Exception {
        ServiceManager serviceManager = ServiceFactory.getServiceManager();
        if (serviceManager != null) {
            serviceManager.stop();
        }
    }

    @Before
    public void before() {
        parser = new DefaultDatabaseStatementParser();
    }

    @Test
    public void removeModelBrackets() {
        ParsedDatabaseStatement parsedStatement = parseStatement("exec [stored_proc]");
        assertEquals("stored_proc", parsedStatement.getModel());
        assertEquals(getScopedMetric("stored_proc", "exec"), parsedStatement.getMetricName());
    }

    @Test
    public void dropProcedure() {
        ParsedDatabaseStatement parsedStatement = parseStatement("DROP PROCEDURE IF EXISTS agent_count_all");
        assertEquals(getScopedMetric("Procedure", "drop"), parsedStatement.getMetricName());
        assertFalse(parsedStatement.recordMetric());
    }

    @Test
    public void createProcedure() {
        ParsedDatabaseStatement parsedStatement = parseStatement("CREATE PROCEDURE agent_count_all() BEGIN SELECT count(name) from agents; END");
        assertEquals(getScopedMetric("Procedure", "create"), parsedStatement.getMetricName());
        assertFalse(parsedStatement.recordMetric());
    }

    @Test
    public void createTable() {
        ParsedDatabaseStatement parsedStatement = parseStatement(
                "create table test (dude_call int, id bigint generated by default as identity (start with 1), version bigint not null, primary key (id))");
        assertEquals(getScopedMetric("Table", "create"), parsedStatement.getMetricName());
        assertFalse(parsedStatement.recordMetric());
    }

    @Test
    public void alter() {
        ParsedDatabaseStatement parsedStatement = parseStatement("ALTER SESSION SET ISOLATION_LEVEL = READ COMMITTED");
        assertEquals(getScopedMetric("session", "alter"), parsedStatement.getMetricName());
        assertFalse(parsedStatement.recordMetric());
    }

    @Test
    public void commonTableExpressionsBasic() {
        ParsedDatabaseStatement parsedDatabaseStatement = parseStatement("with t1 as (select * from foo) select count(bar) from t1");
        assertEquals("t1", parsedDatabaseStatement.getModel());
        assertTrue(parsedDatabaseStatement.recordMetric());
    }

    @Test
    public void commonTableExpressionRecursive() {
        ParsedDatabaseStatement parsedDatabaseStatement = parseStatement("with recursive t1 as (select * from foo) select count(bar) from t1");
        assertEquals("t1", parsedDatabaseStatement.getModel());
        assertTrue(parsedDatabaseStatement.recordMetric());
    }

    @Test
    public void testSelectStatements() {
        ParsedDatabaseStatement parsedStatement = parseStatement("Select * from metrics");
        assertEquals("select", parsedStatement.getOperation());
        assertTrue(parsedStatement.recordMetric());

        parsedStatement = parseStatement("Select *\nfrom metrics\nwhere id = 5");
        assertEquals("select", parsedStatement.getOperation());
        assertTrue(parsedStatement.recordMetric());

        parsedStatement = parseStatement("Select @@session.tx_isolation");
        assertEquals("select", parsedStatement.getOperation());
        assertEquals("VARIABLE", parsedStatement.getModel());
        assertFalse(parsedStatement.recordMetric());

        parsedStatement = parseStatement(
                "SELECT ui.* FROM user_info ui, member_info mi WHERE ui.username = ? AND ui.pwd = ? AND ui.active = ? AND mi.user_id = ui.id AND mi.active = ?");
        assertEquals("select", parsedStatement.getOperation());
        assertEquals("user_info", parsedStatement.getModel());
        assertTrue(parsedStatement.recordMetric());


        parsedStatement = parseStatement("SELECT count(*) theCount FROM v$session WHERE client_info = ?");
        assertEquals("select", parsedStatement.getOperation());
        assertEquals("v$session", parsedStatement.getModel());
        assertTrue(parsedStatement.recordMetric());

        parsedStatement = parseStatement(
                "select krusher?_.id as id?_?_, location?_.id as id?_?_, followers?_.id as id?_?_, followees?_.id as id?_?_, krusher?_.ban_info as ban?_?_?_, krusher?_.birth_date as birth?_?_?_, krusher?_.campaign as campaign?_?_, krusher?_.click_id as click?_?_?_, krusher?_.email as email?_?_, krusher?_.facebook_oauth_token as facebook?_?_?_, krusher?_.facebook_user_id as facebook?_?_?_, krusher?_.gender as gender?_?_, krusher?_.likes as likes?_?_, krusher?_.posts as posts?_?_, krusher?_.crew as crew?_?_, krusher?_.week_likes as week?_?_?_, krusher?_.week_posts as week?_?_?_, krusher?_.weekly_stats_date as weekly?_?_?_, krusher?_.last_ip as last?_?_?_, krusher?_.last_login_date as last?_?_?_, krusher?_.location as location?_?_, krusher?_.nickname as nickname?_?_, krusher?_.partner as partner?_?_, krusher?_.referrer as referrer?_?_, krusher?_.sign_up_date as sign?_?_?_, location?_.city as city?_?_, location?_.country as country?_?_, location?_.facebook_location_id as facebook?_?_?_, location?_.state as state?_?_, location?_.zip as zip?_?_, followers?_.following as following?_?_, followers?_.krusher_from as krusher?_?_?_, followers?_.krusher_to as krusher?_?_?_, followers?_.social_network as social?_?_?_, followers?_.krusher_to as krusher?_?__, followers?_.id as id?__, followees?_.following as following?_?_, followees?_.krusher_from as krusher?_?_?_, followees?_.krusher_to as krusher?_?_?_, followees?_.social_network as social?_?_?_, followees?_.krusher_from as krusher?_?__, followees?_.id as id?__ from krusher krusher?_ left outer join location location?_ on krusher?_.location=location?_.id left outer join friend followers?_ on krusher?_.id=followers?_.krusher_to left outer join friend followees?_ on krusher?_.id=followees?_.krusher_from where krusher?_.facebook_oauth_token=?");
        assertEquals("select", parsedStatement.getOperation());
        assertEquals("krusher", parsedStatement.getModel());
        assertTrue(parsedStatement.recordMetric());

    }

    @Test
    public void prepareStatementsDoNotGenerateMetrics() {
        ParsedDatabaseStatement parsedStatement = parseStatement("Prepare: Select * from metrics");
        assertEquals("select", parsedStatement.getOperation());
        assertFalse(parsedStatement.recordMetric());

        parsedStatement = parseStatement("Prepare: Select * from\tmetrics\twhere id = 6");
        assertEquals("select", parsedStatement.getOperation());
        assertFalse(parsedStatement.recordMetric());

        parsedStatement = parseStatement("Prepare: Select to, `from` from metrics where id = 6");
        assertEquals("select", parsedStatement.getOperation());
        assertFalse(parsedStatement.recordMetric());

        parsedStatement = parseStatement(
                "Prepare: select qnameentit0_.id as id1_, qnameentit0_.version as version1_, qnameentit0_.ns_id as ns3_1_, qnameentit0_.local_name as local4_1_ from alf_qname qnameentit0_ inner join alf_namespace namespacee1_ on qnameentit0_.ns_id=namespacee1_.id where namespacee1_.uri=? and qnameentit0_.local_name=?");
        assertEquals("select", parsedStatement.getOperation());
        assertFalse(parsedStatement.recordMetric());
    }

    @Test
    public void anotherSelect() {
        String sql = "select pemlid, message, to_char(dt_modified, 'MM/DD\"<br>\"HH:MIAM'), to_char(dt_sent, 'MM/DD\"<br>\"HH:MIAM'), to_char(dt_open, 'MM/DD\"<br>\"HH:MIAM'), to_char(dt_yes, 'MM/DD\"<br>\"HH:MIAM'), to_char(dt_no, 'MM/DD\"<br>\"HH:MIAM'), to_char(dt_cancel, 'MM/DD\"<br>\"HH:MIAM'), replace(peml_notes, ' ', '<BR>'), replace(cust_notes, ' ', '<BR>'), rep, decode(peml_type, '1', 'req', 'opt'), NVL(sign(sysdate-(900/86400)-NVL(dt_yes, dt_no)), '0') from prod_peml where orderid='776371' order by pemlid";
        ParsedDatabaseStatement parsedStatement = parseStatement(sql);
        assertEquals("select", parsedStatement.getOperation());
        assertEquals("prod_peml", parsedStatement.getModel());
    }

    @Test
    public void selectTableNameInBrackets() {
        String sql = "SELECT count(*) AS count_all FROM [customers] WHERE (1 = 1 AND customers.created_at <= '2011-05-05 02:59:59')";
        ParsedDatabaseStatement parsedStatement = parseStatement(sql);
        assertEquals("select", parsedStatement.getOperation());
        assertEquals("customers", parsedStatement.getModel());
    }

    @Test
    public void selectTicks() {
        String sql = "SELECT timezone_name AS timezone FROM `www_opentracker_net`.timezones_registered;";
        ParsedDatabaseStatement parsedStatement = parseStatement(sql);
        assertEquals("select", parsedStatement.getOperation());
        assertEquals("www_opentracker_net.timezones_registered", parsedStatement.getModel());
    }

    @Test
    public void functionSelect() {
        String sql = "/* dynamic native SQL query */ select * from new_content_genre_chart('albums',183,40)";
        ParsedDatabaseStatement parsedStatement = parseStatement(sql);
        assertEquals("select", parsedStatement.getOperation());

        assertEquals("new_content_genre_chart", parsedStatement.getModel());
    }

    @Test
    public void multiLineComment() {
        String sql = "/* dude this comment\n is crazy.  \n yo */ select * from dude";
        ParsedDatabaseStatement parsedStatement = parseStatement(sql);
        assertEquals("select", parsedStatement.getOperation());

        assertEquals("dude", parsedStatement.getModel());
    }

    @Test
    public void innerSelect() {
        String sql = "select * from (select * from dude)";
        ParsedDatabaseStatement parsedStatement = parseStatement(sql);
        assertEquals("select", parsedStatement.getOperation());
        assertEquals("dude", parsedStatement.getModel());
    }

    @Test
    public void innerSelect2() {
        String sql = "SELECT t.* FROM (SELECT ROW_NUMBER() OVER(ORDER BY customers.ad_channel DESC) AS _row_num, * FROM [customers] WHERE (? = ?)) AS t WHERE t._row_num BETWEEN ? AND ?";
        ParsedDatabaseStatement parsedStatement = parseStatement(sql);
        assertEquals("select", parsedStatement.getOperation());
        assertEquals("customers", parsedStatement.getModel());
    }

    @Test
    public void innerSelect3() {
        String sql = "select * from (select s.rush, NVL(NVL(o.postor, o.finalizer), o.assignedPM)assignedPM, o.orderid, (case when (l.expiration IS NULL or l.expiration<SYSDATE ) then ? else ? end) isLocked, o.design, to_char(s.dtb_release, ?) dtb_release, to_char(s.dt_release, ?) dt_release, o.printer, o.totalunits, o.totalprice from prod_lock l, (select orderid from wm_order where dt_placed between to_date(?, ?) and SYSDATE+? and tracking_no is not null) a, (select x.orderid, x.dtb_release, x.dt_release, x.rush from prod_sched x where x.dt_extra? IS NULL and (NOT EXISTS (select pp.orderid from prod_printcalc pp where pp.orderid=x.orderid)) and x.dt_finalize IS NOT NULL and x.dt_finalize between to_date(?, ?) and SYSDATE and x.dt_process is not null and x.dt_proof is not null )s, (select * from prod_overview where printer NOT IN (?, ?, ? ))o, (select orderid from prod_print where method !=?)p, (select distinct orderid from prod_blank where source !=?)bl where s.orderid=o.orderid and o.orderid=a.orderid and a.orderid=l.orderid and a.orderid=p.orderid and a.orderid=bl.orderid order by s.dtb_release, decode(s.rush, ?, ?, ?, ?, decode(s.rush, ?, ?, ?)) , a.orderid ) where rownum <= ?";
        ParsedDatabaseStatement parsedStatement = parseStatement(sql);
        assertEquals("select", parsedStatement.getOperation());
        assertEquals("prod_lock", parsedStatement.getModel());
    }

    @Test
    public void innerSelect4() {
        String sql = "-- com.mxi.mx.common.query.alert.GetNewAlertCountsForUser SELECT critical.critical_ct, uncritical.uncritical_ct FROM ( SELECT COUNT( * ) AS critical_ct FROM utl_user_alert, utl_alert, utl_alert_type WHERE utl_alert.alert_id = utl_user_alert.alert_id AND utl_alert.priority > ? AND utl_alert.alert_type_id = utl_alert_type.alert_type_id AND utl_alert_type.category <> ? AND utl_user_alert.acknowledged_bool = ? AND utl_user_alert.user_id = ? ) critical, ( SELECT COUNT( * ) AS uncritical_ct FROM utl_user_alert, utl_alert, utl_alert_type WHERE utl_alert.alert_id = utl_user_alert.alert_id AND utl_alert.priority < ? AND utl_alert.alert_type_id = utl_alert_type.alert_type_id AND utl_alert_type.category <> ? AND utl_user_alert.acknowledged_bool = ? AND utl_user_alert.user_id = ? ) uncritical";
        ParsedDatabaseStatement parsedStatement = parseStatement(sql);
        assertEquals("select", parsedStatement.getOperation());
    }

    @Test
    public void innerSelect5() {
        String sql = "SELECT * FROM (SELECT a.*, ROWNUM rnum FROM (SELECT ID AS a1, BIRTHDAY AS a2, BIRTHPLACE AS a3, CELLULAR_PHONE AS a4, COMMENTS AS a5, created AS a6, CURRENT_TEAM AS a7, DEATHDAY AS a8, DEBUT AS a9, EARLIER_TEAMS AS a10, EHIS_ID AS a11, EMAIL AS a12, ENETPULSE_ID AS a13, FAX AS a14, FIRSTNAME AS a15, GOALS_FOR_TEAM AS a16, HEIGHT AS a17, HOMEPAGE AS a18, HONOURS AS a19, INJURE_SITUATION AS a20, LAST_UPDATED AS a21, LASTNAME AS a22, MAPPING_STATUS AS a23, MATCHES_FOR_TEAM AS a24, MIDDLENAME AS a25, NATIONAL_A_DEBUT AS a26, NATIONAL_A_GOALS AS a27, NATIONAL_A_MATCHES AS a28, NATIONAL_U_GOALS AS a29, NATIONAL_U_MATCHES AS a30, NICKNAME AS a31, NIFS_ID AS a32, PICTURE_URL AS a33, POSTADDRESS AS a34, POSTNUMBER AS a35, ROLE_TEXT AS a36, STREET AS a37, SUSPENSION AS a38, TELEPHONE AS a39, updated AS a40, version AS a41, VIZ_LOGO_PATH AS a42, WEIGHT AS a43, COUNTRY_ID AS a44, PERSONROLE_ID AS a45, CURRENT_TEAM_ID AS a46 FROM PERSON) a WHERE ROWNUM <= ?) WHERE rnum > ?";
        ParsedDatabaseStatement parsedStatement = parseStatement(sql);
        assertEquals("select", parsedStatement.getOperation());
        assertEquals("person", parsedStatement.getModel());
    }

    @Test
    public void innerSelectMetaData() {
        String sql = "select ent.PLAN_PLAN_PRIORITY, ent.TYPE_ID, ent.TYPE, ent.PRIMARY_RELEASE, ent.IS_PARENT, ent.NAME, ent.ID, ent.OWNER_NAME, ent.OWNER_STATUS, ent.SERIAL_NUMBER, ent.ADDITIONAL_RELEASE, ent.RELEASE_NAME, PLAN_REF_ENTITY,\"PLAN\",INVEST_EST_AGGREG ATED, PLAN_NODE_ID,seq.NODE_ID from (select ent1.*,\"PLAN\" as PLAN_NODE_ID from PLAN_FEATURES_VIEW ent1) ent,COMN_HIERARCHY_SEQ seq where ent.\"PLAN\"=? and (1=1 and ((ent.ACCESS_MODE in (-1,0,1,2)) or ent.OWNER=? or ent.OWNER in (select gu.GROUP_ID as OWNER from USR_GROUP_USER gu where gu.USER_ID=?) or (ent.ACCESS_MODE=6 and (ent.ID in (select pem.ENTITY_ID as ID from V_PRINCIPAL_ENTITY_MEMBERSHIP pem where pem.MEMBER_ID=?) or ent.ID in (select ENTITY_ID as ID from COMN_ENTITY_STAKEHOLDER_REL where USER_ID=?))) or ( ent.ACCESS_MODE=6 and exists( select 0 from (select OWNER,ID as ENTITY_ID from WKFL_ENT_ACT_PROT_U_VIEW) act where act.ENTITY_ID=ent.ID and (act.OWNER=?)))) and (ent.TYPE_ID=0 or (ent.TYPE_ID>0 and exists(select 0 from (select ID as REL_GROUP_ID,ENTITY_TYPE_ID as REL_ENTITY_TYPE_ID from REL_GROUP_SUB_TYPE_VIEW) rel, USR_GROUP_USER gu where rel.REL_ENTITY_TYPE_ID=ent.TYPE_ID and rel.REL_GROUP_ID=gu.GROUP_ID and gu.USER_ID=?)))) and seq.NODE_ID=ent.ID order by PRIMARY_RELEASE desc,seq.HIERARCH_SEQ,seq.LVL,seq.SN";
        ParsedDatabaseStatement parsedStatement = parseStatement(sql, new MyResultSetMetaData("DUDE"));
        assertEquals("select", parsedStatement.getOperation());
        assertEquals("dude", parsedStatement.getModel());
    }

    @Test
    public void select() {
        String sql = "SELECT Product.Id,Product.Cost,Product.Name,Product.Summary,Product.Availability FROM `Product` WHERE Id IN (SELECT ProductId FROM ProductTaxonomy WHERE TaxId=220) AND Active = 1 AND Id NOT IN (Select AssocId FROM ProductPairing) ORDER BY Name LIMIT 15 OFFSET 120";
        ParsedDatabaseStatement parsedStatement = parseStatement(sql);
        assertEquals("select", parsedStatement.getOperation());
        assertEquals("product", parsedStatement.getModel());
    }

    @Test
    public void testAs() {
        String sql = "select citydeal?_.cd_id as cd?_?_?_, merchant?_.dm_id as dm?_?_?_, citydeal?_.cd_appdomain_id as cd?_?_?_, citydeal?_.cd_canonical_tag as cd?_?_?_, citydeal?_.cd_ptc_city_id as cd?_?_?_, citydeal?_.cd_coupon_how_it_works as cd?_?_?_, citydeal?_.cd_deal_title_coupon as cd?_?_?_, citydeal?_.cd_deal_email_type as cd?_?_?_, citydeal?_.cd_dlg_id as cd?_?_?_, citydeal?_.cd_deal_type_id as cd?_?_?_, citydeal?_.cd_deal_end_time as cd?_?_?_, citydeal?_.cd_short_highlights as cd?_?_?_, citydeal?_.cd_image_big as cd?_?_?_, citydeal?_.cd_image_newsletter as cd?_?_?_, citydeal?_.cd_sidedeal_image as cd?_?_?_, citydeal?_.cd_image_small as cd?_?_?_, citydeal?_.cd_last_modified as cd?_?_?_, citydeal?_.cd_long_description as cd?_?_?_, citydeal?_.cd_customer_index_max as cd?_?_?_, citydeal?_.cd_participant_maximum as cd?_?_?_, citydeal?_.cd_merchant_id as cd?_?_?_, citydeal?_.cd_meta_description as cd?_?_?_, citydeal?_.cd_meta_keywords as cd?_?_?_, citydeal?_.cd_meta_title as cd?_?_?_, citydeal?_.cd_participant_minimum as cd?_?_?_, citydeal?_.cd_mobile_description as cd?_?_?_, citydeal?_.cd_mulligan_enabled as cd?_?_?_, citydeal?_.cd_mulligan_parent as cd?_?_?_, citydeal?_.cd_multideal_parent as cd?_?_?_, citydeal?_.cd_multideal_type as cd?_?_?_, citydeal?_.cd_newsletter_side_deal_title as cd?_?_?_, citydeal?_.cd_newsletter_subject as cd?_?_?_, citydeal?_.cd_newsletter_textblock as cd?_?_?_, citydeal?_.cd_newsletter_title as cd?_?_?_, citydeal?_.cd_original_price_gross as cd?_?_?_, citydeal?_.cd_special_price_gross as cd?_?_?_, citydeal?_.cd_deal_priority as cd?_?_?_, citydeal?_.cd_salesforce_id as cd?_?_?_, citydeal?_.cd_deal_start_time as cd?_?_?_, citydeal?_.cd_scheduled_for_newsletter as cd?_?_?_, citydeal?_.cd_voucher_send_by_sms as cd?_?_?_, citydeal?_.cd_short_description as cd?_?_?_, citydeal?_.cd_sms_prefix as cd?_?_?_, citydeal?_.cd_participant_current as cd?_?_?_, citydeal?_.cd_deal_status as cd?_?_?_, citydeal?_.cd_special_price_tax as cd?_?_?_, citydeal?_.cd_title as cd?_?_?_, citydeal?_.cd_title_for_url_permalink as cd?_?_?_, citydeal?_.cd_coupon_valid_from as cd?_?_?_, citydeal?_.cd_coupon_valid_until as cd?_?_?_, citydeal?_.cd_voucher_delivery_event as cd?_?_?_, citydeal?_.cd_mvc_pool_id as cd?_?_?_, merchant?_.dm_appdomain_id as dm?_?_?_, merchant?_.dm_merchant_city as dm?_?_?_, merchant?_.dm_email as dm?_?_?_, merchant?_.dm_fax_number as dm?_?_?_, merchant?_.dm_merchant_googlemaps_ref as dm?_?_?_, merchant?_.dm_merchant_homepage as dm?_?_?_, merchant?_.dm_last_modified as dm?_?_?_, merchant?_.dm_merchant_logo as dm?_?_?_, merchant?_.dm_mulligan_enabled as dm?_?_?_, merchant?_.dm_merchant_company_name as dm?_?_?_, merchant?_.dm_merchant_opening_hours as dm?_?_?_, merchant?_.dm_password as dm?_?_?_, merchant?_.dm_merchant_phone as dm?_?_?_, merchant?_.dm_status as dm?_?_?_, merchant?_.dm_merchant_street as dm?_?_?_, merchant?_.dm_merchant_street_number as dm?_?_?_, merchant?_.dm_merchant_welcome_message as dm?_?_?_, merchant?_.dm_merchant_zipcode as dm?_?_?_ from std_data.city_deals citydeal?_ inner join std_data.deal_merchant merchant?_ on citydeal?_.cd_merchant_id=merchant?_.dm_id where citydeal?_.cd_id=? limit ?";
        ParsedDatabaseStatement parsedStatement = parseStatement(sql);
        assertEquals("select", parsedStatement.getOperation());
        assertEquals("std_data.city_deals", parsedStatement.getModel());
    }

    @Test
    public void exec() {
        ParsedDatabaseStatement parsedStatement = parseStatement("EXEC TSIP_API_RATES_LOOKUP_INTL");
        assertEquals("exec", parsedStatement.getOperation());
        assertEquals("tsip_api_rates_lookup_intl", parsedStatement.getModel());
        assertEquals(getScopedMetric("tsip_api_rates_lookup_intl", "exec"), parsedStatement.getMetricName());
        assertTrue(parsedStatement.recordMetric());
    }

    @Test
    public void execute() {
        ParsedDatabaseStatement parsedStatement = parseStatement("EXECUTE DAGetAccount @AccountID=?,@IncludeLotLinks=?");
        assertEquals("exec", parsedStatement.getOperation());
        assertEquals("dagetaccount", parsedStatement.getModel());
        assertEquals(getScopedMetric("dagetaccount", "exec"), parsedStatement.getMetricName());
        assertTrue(parsedStatement.recordMetric());
    }

    @Test
    public void execVariable() {
        ParsedDatabaseStatement parsedStatement = parseStatement("exec @test =stored_procedure");
        assertEquals("exec", parsedStatement.getOperation());
        assertEquals("stored_procedure", parsedStatement.getModel());
        assertEquals(getScopedMetric("stored_procedure", "exec"), parsedStatement.getMetricName());
        assertTrue(parsedStatement.recordMetric());
    }

    @Test
    public void execVariableCustom() {
        ParsedDatabaseStatement parsedStatement = parseStatement("EXEC @?nr__cool_sp = [so].[cool].[nr_Code_count]");
        assertEquals("exec", parsedStatement.getOperation());
        assertEquals("so.cool.nr_code_count", parsedStatement.getModel());
        assertEquals(getScopedMetric("so.cool.nr_code_count", "exec"), parsedStatement.getMetricName());
        assertTrue(parsedStatement.recordMetric());
    }

    @Test
    public void execVariableComplex() {
        ParsedDatabaseStatement parsedStatement = parseStatement(
                "USE testing; EXECUTE AS LOGIN = ?;\n" +
                        "    SET NOCOUNT ON;\n" +
                        "    BEGIN TRAN;\n" +
                        "    SET XACT_ABORT ON;\n" +
                        "    DECLARE @VAR1 AS INT; SET @VAR1 = ?;\n" +
                        "    DECLARE @VAR2 AS VARCHAR(?); SET @VAR2 = ?;\n" +
                        "    DECLARE @?spASDF___vw INT = ?;\n" +
                        "    EXEC @?spASDF___vw = [so].[cool].[sp_test_procedure]\n" +
                        "    @VAR1 = @VAR1, @VAR2 = @VAR2;\n" +
                        "    IF (@?spASDF___vw < ?)\n" +
                        "    BEGIN ROLLBACK TRAN; END\n" +
                        "            ELSE\n" +
                        "    BEGIN COMMIT TRAN; END\n" +
                        "    ;\n" +
                        "    USE testing; REVERT;");
        assertEquals("exec", parsedStatement.getOperation());
        assertEquals("so.cool.sp_test_procedure", parsedStatement.getModel());
        assertEquals(getScopedMetric("so.cool.sp_test_procedure", "exec"), parsedStatement.getMetricName());
        assertTrue(parsedStatement.recordMetric());
    }

    @Test
    public void spTest() {
        ParsedDatabaseStatement parsedStatement = parseStatement("DECLARE @sp_var AS INT; EXEC @sp_var = spProc");
        assertEquals("exec", parsedStatement.getOperation());
        assertEquals("spproc", parsedStatement.getModel());
        assertEquals(getScopedMetric("spproc", "exec"), parsedStatement.getMetricName());
        assertTrue(parsedStatement.recordMetric());
    }

    @Test
    public void spTest2() {
        ParsedDatabaseStatement parsedStatement = parseStatement("EXEC something; exec as somethingElse");
        assertEquals("exec", parsedStatement.getOperation());
        assertEquals("something", parsedStatement.getModel());
        assertEquals(getScopedMetric("something", "exec"), parsedStatement.getMetricName());
        assertTrue(parsedStatement.recordMetric());
    }

    @Test
    public void spTest3() {
        ParsedDatabaseStatement parsedStatement = parseStatement("EXEC assume");
        assertEquals("exec", parsedStatement.getOperation());
        assertEquals("assume", parsedStatement.getModel());
        assertEquals(getScopedMetric("assume", "exec"), parsedStatement.getMetricName());
        assertTrue(parsedStatement.recordMetric());
    }

    @Test
    public void show() {
        ParsedDatabaseStatement parsedStatement = parseStatement("SHOW SESSION VARIABLES");
        assertEquals("show", parsedStatement.getOperation());
        assertFalse(parsedStatement.recordMetric());

        parsedStatement = parseStatement("SHOW COLLATION");
        assertEquals("show", parsedStatement.getOperation());
        assertFalse(parsedStatement.recordMetric());

        parsedStatement = parseStatement("SHOW @@LEVEL");
        assertEquals("show", parsedStatement.getOperation());
    }

    @Test
    public void set() {
        ParsedDatabaseStatement parsedStatement = parseStatement("SET SESSION CHARACTERISTICS AS TRANSACTION READ ONLY");
        assertEquals("set", parsedStatement.getOperation());
        assertFalse(parsedStatement.recordMetric());
        assertEquals(getScopedMetric("session characteristics", "set"), parsedStatement.getMetricName());
    }

    @Test
    public void setEquals() {
        ParsedDatabaseStatement parsedStatement = parseStatement("SET PATH = SYSIBM, SYSFUN, 'ICMADMIN'");
        assertEquals("set", parsedStatement.getOperation());
        assertFalse(parsedStatement.recordMetric());
        assertEquals(getScopedMetric("path", "set"), parsedStatement.getMetricName());
    }

    @Test
    public void selectQuotedTableName() {
        ParsedDatabaseStatement parsedStatement = parseStatement("Select * from 'metrics'");
        assertEquals("select", parsedStatement.getOperation());
        assertEquals("metrics", parsedStatement.getModel());

        parsedStatement = parseStatement("Select * from \"metrics\"");
        assertEquals("metrics", parsedStatement.getModel());
    }

    @Test
    public void testCallStatements() {
        ParsedDatabaseStatement parsedStatement = parseStatement("call dude(?)");
        assertEquals("call", parsedStatement.getOperation());
        assertEquals("dude", parsedStatement.getModel());
        assertTrue(parsedStatement.recordMetric());
    }

    @Test
    public void testCallStatementsWithAssignment() {
        ParsedDatabaseStatement parsedStatement = parseStatement("? = call man(?)");
        assertEquals("call", parsedStatement.getOperation());
        assertEquals("man", parsedStatement.getModel());
        assertTrue(parsedStatement.recordMetric());
    }

    @Test
    public void testInsertStatements() {
        ParsedDatabaseStatement parsedStatement = parseStatement("insert into dude(1,2,3)");
        assertEquals("insert", parsedStatement.getOperation());
        assertEquals("dude", parsedStatement.getModel());
        assertTrue(parsedStatement.recordMetric());

        parsedStatement = parseStatement("insert into test\nselect * from dude");
        assertEquals("insert", parsedStatement.getOperation());
        assertEquals("test", parsedStatement.getModel());
    }

    @Test
    public void testUpdates() {
        ParsedDatabaseStatement parsedStatement = parseStatement("update dude set one = 'two'");
        assertEquals("update", parsedStatement.getOperation());
        assertEquals("dude", parsedStatement.getModel());
        assertTrue(parsedStatement.recordMetric());

        parsedStatement = parseStatement("update test set one = 1 where two = 2");
        assertEquals("update", parsedStatement.getOperation());
        assertEquals("test", parsedStatement.getModel());

        parsedStatement = parseStatement(" update bad set update = true");
        assertEquals("update", parsedStatement.getOperation());
        assertEquals("bad", parsedStatement.getModel());

        parsedStatement = parseStatement(
                "UPDATE Product, (SELECT ProductId, COUNT(*) AS ViewCount FROM ProductView GROUP BY ProductId) AS ViewSummary SET Product.ViewCount=ViewSummary.ViewCount WHERE Product.Id=ViewSummary.ProductId");
        assertEquals("update", parsedStatement.getOperation());
        assertEquals("product", parsedStatement.getModel());

        parsedStatement = parseStatement(
                "UPDATE Product, (SELECT ProductId, count(ProductId) AS vote_count, SUM(Rating) AS rating_sum, SUM(Rating)/count(ProductId) AS vote_average FROM ProductVote GROUP BY ProductId) AS VoteSummary SET Product.VoteCount=VoteSummary. vote_count, Product.VoteSum=VoteSummary. rating_sum, Product. RecentVoteAverage=VoteSummary. vote_average WHERE Product.Id=VoteSummary. ProductId");
        assertEquals("update", parsedStatement.getOperation());
        assertEquals("product", parsedStatement.getModel());

        parsedStatement = parseStatement(
                "UPDATE phpbb_sessions\n\n SET session_user_id = -?, session_start = ?, session_time = ?, session_page = ?, session_logged_in = ?, session_admin = ? WHERE session_id = ? AND session_ip = ?");
        assertEquals("update", parsedStatement.getOperation());
        assertEquals("phpbb_sessions", parsedStatement.getModel());

        /*
         * parsedStatement = parseStatement(
         * "UPDATE (SELECT ProductId, COUNT(*) AS ViewCount FROM ProductView GROUP BY ProductId) AS ViewSummary, Product SET Product.ViewCount=ViewSummary.ViewCount WHERE Product.Id=ViewSummary.ProductId"
         * ); Assert.assertEquals("update", parsedStatement.getOperation()); Assert.assertEquals("product",
         * parsedStatement.getModel());
         */
    }

    @Test
    public void testDeleteStatements() {
        ParsedDatabaseStatement parsedStatement = parseStatement("Delete from metrics");
        assertEquals("delete", parsedStatement.getOperation());
        assertTrue(parsedStatement.recordMetric());

        ParsedDatabaseStatement deleteStatement = parseStatement("delete from metrics where id in (select * from dude)");
        assertEquals("delete", deleteStatement.getOperation());
        assertEquals("metrics", deleteStatement.getModel());

        ParsedDatabaseStatement multiDeleteStatement = parseStatement("delete metrics from metrics where id in (select * from dude)");
        assertEquals("delete", multiDeleteStatement.getOperation());
        assertEquals("metrics", multiDeleteStatement.getModel());
    }

    @Test
    public void testAlphaNumeric() {
        assertTrue(DefaultDatabaseStatementParser.isValidName("a"));
        assertTrue(DefaultDatabaseStatementParser.isValidName("abdc12"));
        assertFalse(DefaultDatabaseStatementParser.isValidName("a)"));
        assertFalse(DefaultDatabaseStatementParser.isValidName(")"));
        assertTrue(DefaultDatabaseStatementParser.isValidName("SCHEMA.table_name"));
        assertFalse(DefaultDatabaseStatementParser.isValidName("[hello]"));
        assertTrue(DefaultDatabaseStatementParser.isValidName("h_ello"));
        assertFalse(DefaultDatabaseStatementParser.isValidName(""));
    }

    @Test
    public void testHint() {
        assertEquals(getScopedMetric("test", "select"),
                parseStatement("/* nrhint: test */ Select * from dude").getMetricName());
    }

    @Test
    public void testHint2() {
        assertEquals(getScopedMetric("some_op", "update"), parseStatement(
                "/* nrhint:some_op*/update that_table set somestuff").getMetricName());
    }

    @Test
    public void testHint3() {
        assertEquals(getScopedMetric("the_hint", "delete"), parseStatement(
                "  /*nrhint:the_hint   */delete from stuff").getMetricName());
    }

    @Test
    public void testHint4() {
        assertEquals(getScopedMetric("the hint dude", "delete"), parseStatement(
                "  /*nrhint: The Hint Dude   */delete from stuff").getMetricName());
    }

    @Test
    public void testHintBogus() {
        assertEquals(getScopedMetric("the_hint", "unknown"), parseStatement(
                "  /*nrhint:the_hint   */bogus sql man").getMetricName());
    }

    @Test
    public void testLargeHtmlTextSqlSlowdown() throws Exception {
        URL htmlFileUrl = this.getClass().getResource("/large_file.html");
        File htmlFile = new File(htmlFileUrl.getFile());
        String largeHtmlText = Files.toString(htmlFile, StandardCharsets.UTF_8);

        ParsedDatabaseStatement parsedStatement = parseStatement(
                "Replace into table1 (col1, col2, col3, col4, col5) values ('string', 'string', '" + largeHtmlText + "', CURRENT_TIMESTAMP, int)");
        assertEquals("other", parsedStatement.getOperation());
        assertNull(parsedStatement.getModel());
        assertEquals(getScopedMetric(null, "other"), parsedStatement.getMetricName());
        assertTrue(parsedStatement.recordMetric());
    }

    @Test
    public void testLargeSqlSlowdown() throws Exception {
        URL largeSqlFileUrl = this.getClass().getResource("/large_sql.sql");
        File largeSqlFile = new File(largeSqlFileUrl.getFile());
        String largeSql = Files.toString(largeSqlFile, StandardCharsets.UTF_8);
        ParsedDatabaseStatement parsedStatement = parseStatement(largeSql);

        assertEquals("insert", parsedStatement.getOperation());
        assertEquals("jxu7wns.djs_project_test", parsedStatement.getModel());
    }

    @Test
    public void testExecCallRegexDisabled() {
        when(agentConfig.getTransactionTracerConfig().isExecCallSqlRegexDisabled()).thenReturn(true);
        parser = new DefaultDatabaseStatementParser();

        // These should return an unparaseable statement instance
        ParsedDatabaseStatement parsedStatement = parseStatement("call dude(?)");
        assertEquals("other", parsedStatement.getOperation());
        assertNull(parsedStatement.getModel());

        parsedStatement = parseStatement("exec dude(?)");
        assertEquals("other", parsedStatement.getOperation());
        assertNull(parsedStatement.getModel());

        // These should parse normally even with the disabled flag on
        parsedStatement = parseStatement("Select * from metrics");
        assertEquals("select", parsedStatement.getOperation());
        assertEquals("metrics", parsedStatement.getModel());

        parsedStatement = parseStatement("DROP PROCEDURE IF EXISTS agent_count_all");
        assertEquals("drop", parsedStatement.getOperation());
        assertEquals("Procedure", parsedStatement.getModel());

        parsedStatement = parseStatement("insert into dude(1,2,3)");
        assertEquals("insert", parsedStatement.getOperation());
        assertEquals("dude", parsedStatement.getModel());

        parsedStatement = parseStatement("delete from  dude");
        assertEquals("delete", parsedStatement.getOperation());
        assertEquals("dude", parsedStatement.getModel());

    }

    private ParsedDatabaseStatement parseStatement(String statement, ResultSetMetaData metaData) {
        return parser.getParsedDatabaseStatement(UnknownDatabaseVendor.INSTANCE, statement, metaData);
    }

    private ParsedDatabaseStatement parseStatement(String statement) {
        return parser.getParsedDatabaseStatement(UnknownDatabaseVendor.INSTANCE, statement, null);
    }

    private String getScopedMetric(String table, String operation) {
        if (null == table) {
            return MessageFormat.format(DatastoreMetrics.OPERATION_METRIC, DatastoreVendor.JDBC.toString(),
                    operation);
        } else {
            return MessageFormat.format(DatastoreMetrics.STATEMENT_METRIC, DatastoreVendor.JDBC.toString(), table,
                    operation);
        }
    }

    private class MyResultSetMetaData implements ResultSetMetaData {
        private String tableName;

        public MyResultSetMetaData(String tableName) {
            this.tableName = tableName;
        }

        public String getCatalogName(int column) throws SQLException {
            return null;
        }

        public String getColumnClassName(int column) throws SQLException {
            return null;
        }

        public int getColumnCount() throws SQLException {
            return 1;
        }

        public int getColumnDisplaySize(int column) throws SQLException {
            return 0;
        }

        public String getColumnLabel(int column) throws SQLException {
            return null;
        }

        public String getColumnName(int column) throws SQLException {
            return null;
        }

        public int getColumnType(int column) throws SQLException {
            return 0;
        }

        public String getColumnTypeName(int column) throws SQLException {
            return null;
        }

        public int getPrecision(int column) throws SQLException {
            return 0;
        }

        public int getScale(int column) throws SQLException {
            return 0;
        }

        public String getSchemaName(int column) throws SQLException {
            return null;
        }

        public String getTableName(int column) throws SQLException {
            return tableName;
        }

        public boolean isAutoIncrement(int column) throws SQLException {
            return false;
        }

        public boolean isCaseSensitive(int column) throws SQLException {
            return false;
        }

        public boolean isCurrency(int column) throws SQLException {
            return false;
        }

        public boolean isDefinitelyWritable(int column) throws SQLException {
            return false;
        }

        public int isNullable(int column) throws SQLException {
            return 0;
        }

        public boolean isReadOnly(int column) throws SQLException {
            return false;
        }

        public boolean isSearchable(int column) throws SQLException {
            return false;
        }

        public boolean isSigned(int column) throws SQLException {
            return false;
        }

        public boolean isWritable(int column) throws SQLException {
            return false;
        }

        public boolean isWrapperFor(Class<?> iface) throws SQLException {
            return false;
        }

        public <T> T unwrap(Class<T> iface) throws SQLException {
            return null;
        }

    }
}
